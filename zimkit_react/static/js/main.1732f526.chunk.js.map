{"version":3,"sources":["store/authSlice.js","store/index.js","util/name.js","util/index.js","util/token.js","config.js","ZIMKit/src/components/ZIMKitCommon/Constant/event.js","ZIMKit/src/components/ZIMAdapter/platform.js","ZIMKit/src/components/ZIMAdapter/index.js","ZIMKit/src/components/ZIMKitCommon/VM/ZIMKitEventHandler.js","ZIMKit/src/locales/zh.js","ZIMKit/src/locales/en.js","ZIMKit/src/plugin/i18n/index.js","ZIMKit/src/components/ZIMKitCommon/VM/ZIMKitManager.js","pages/Login/index.tsx","ZIMKit/src/components/ZIMKitConversation/Model/index.js","ZIMKit/src/components/ZIMKitConversation/VM/ZIMKitConversation.js","ZIMKit/src/components/ZIMKitGroup/VM/ZIMKitGroupVM.js","ZIMKit/src/components/ZIMKitCommon/UI/components/CreateChatDialog/index.tsx","ZIMKit/src/components/ZIMKitCommon/UI/components/RightClickDialog/index.tsx","ZIMKit/src/components/ZIMKitCommon/ToolUtil/dateFormat.js","ZIMKit/src/components/ZIMKitCommon/ToolUtil/eventBus.js","ZIMKit/src/components/ZIMKitMessage/Model/index.js","ZIMKit/src/components/ZIMKitConversation/UI/index.tsx","ZIMKit/src/components/ZIMKitMessage/VM/ZIMKitMessageVM.js","ZIMKit/src/components/ZIMKitMessage/UI/index.tsx","ZIMKit/src/components/ZIMKitGroup/UI/index.tsx","ZIMKit/src/components/ZIMKitCommon/UI/components/Toast/index.tsx","ZIMKit/src/components/ZIMKitCommon/UI/components/BaseDialog/index.tsx","ZIMKit/src/components/ZIMKitCommon/UI/index.tsx","pages/Main/index.tsx","pages/App/index.tsx","reportWebVitals.js","index.tsx","ZIMKit/src/components/ZIMAdapter/index.entity.js"],"names":["authSlice","createSlice","name","initialState","isInit","isLoggedIn","reducers","initIMKitSDK","state","action","payload","login","logout","actions","selectIsLoggedIn","store","configureStore","reducer","useSelector","util_name","getCacheUserInfo","localStorage","userInfo","JSON","parse","getUserName","value","cacheUserList","userList","randomName","nameArr","Math","floor","random","length","result","userName","verify","some","item","userID","filter","getToken","appConfig","fetch","tokenURL","then","res","json","token","EventName","src_config","appID","serverSecret","ZIMPlatformManage","platform","Object","classCallCheck","this","process","PLATFORM","ZIMAdapter","createClass","key","type","listener","getInstance","on","off","destroy","renewToken","config","queryConversationList","groupInfo","userIDs","createGroup","message","toUserID","sendPeerMessage","toGroupID","sendGroupMessage","conversationID","conversationType","queryHistoryMessage","deleteConversation","clearConversationUnreadMessageCount","groupID","queryGroupInfo","queryGroupMemberList","joinGroup","leaveGroup","zimPlatformManage","ZIMPlatform","Web","__webpack_require__","e","bind","zimAdapter","zimModule","ZIMWeb","Promise","resolve","create","ZIMKitEventHandler","_this$eventList","eventList","defineProperty","zimError","zimConnectionStateChanged","zimTokenWillExpire","zimReceivePeerMessage","zimReceiveGroupMessage","zimConversationTotalUnreadMessageCountUpdated","zimConversationChanged","zimKitIsLoggedIn","zimKitLoginUserUpdate","zimKitDeleteConversation","zimKitConversationListUpdate","zimKitCurrentConversationUpdate","zimKitConversationListQueryAbnormally","zimKitCreateGroup","zimKitCurrentChatUpdated","zimKitCurrentMessageListUpdated","zimKitCurrentGroupInfoUpdated","instance","event","callBackList","_this","Array","isArray","forEach","callBack","includes","push","li","splice","indexOf","_len","arguments","args","_key","func","apply","zh","common_yesterday","common_user_kick_out","common_monday","common_tuesday","common_wednesday","common_thursday","common_friday","common_saturday","common_sunday","common_logout","common_return","conversation_start_chat_w","conversation_empty","conversation_start_single_chat","conversation_start_group_chat","conversation_join_group_chat","conversation_cancel","conversation_delete","conversation_message_total_count","conversation_reload","conversation_enter_touserid_w","conversation_close_chat_w","demo_login_hint","demo_login","demo_user_name","demo_user_name_w","demo_welcome","demo_input_user_id_error_tips","demo_input_placeholder_w","demo_user_id_login","group_create_chat","group_input_group_id","group_input_group_id_w","group_input_group_name","group_input_user_id_of_group","group_input_user_id_of_group_w","group_user_id_cant_null","group_create_group_chat_title","group_join_group_chat","group_user_not_exit","group_group_not_exit","group_group_user_id_not_exit","group_group_user_id_not_exit_w","group_group_id_not_exit","group_group_id_not_exit_w","group_input_user_id_error_tip","group_group_id","group_copy","group_copy_success","message_input_new_message","message_user_not_exit_please_again","message_user_not_exit_please_again_w_1","message_user_not_exit_please_again_w_2","message_cant_send_empty_msg","message_create_chat","message_input_user_id_error_tips","message_create_single_chat","message_send_w","message_empty_w","en","ZIMKiti18n","localesData","i18next","i18n","use","initReactI18next","options","resources","translation","fallbackLng","navigator","language","detection","caches","init","assign","cn","ZIMKitManager","eventHandler","initPlatform","zim","onEvent","window","manager","_this2","actionListener","offEvent","callback","addEventListener","_this3","errorInfo","data","getI18next","LoginPage","props","possibleConstructorReturn","getPrototypeOf","call","assertThisInitialized","loginFun","setState","objectSpread","target","loginWithUserInfo","setItem","stringify","setCacheUserInfo","find","addCacheUserToList","catch","error","react_default","a","createElement","id","react_router","to","replace","className","t","concat","placeholder","onInput","style","display","onClick","disabled","React","Component","connect","dispatch","content","ZIMKitConversationModel","conversation","conversationName","unreadMessageCount","lastMessage","orderKey","notificationStatus","ZIMKitConversationVM","pagePullCount","conversationList","totalUnreadMessageCount","isAbnormal","activeCvID","loadStatus","initListenerHandle","updateListFlag","updateCurrentFlag","infoList","info","isExist","len","insetConversationList","sortCvListHandle","currentConversation","getConversationByID","nextConversation","undefined","count","reject","firstConversation","_this4","isAlsoDeleteServerConversation","index","console","insetConversation","sort","b","ZIMKitGroupVM","memberList","currentGroupInfo","baseInfo","groupName","userIDList","nextFlag","TabItem","changeNav","onNavChange","actived","text","TabList","tabList","map","element","handleNavChange","current","tabListView","CreateChatDialog_TabItem","TableContent","peerErrTip","peerDisabled","groupErrTip","groupDisabled","closeDialog","createPeerChat","createGroupChat","handleUserIDInputChange","handleGroupUserIDInputChange","handleGroupIDInputChange","handleGroupNameInputChange","onCloseDialog","onCreatePeerChat","onCreateGroupChat","onJoinGroup","arr","split","flag","tableContentView","errTipView","_this$state","currentActived","maxLength","CreateChatDialog","_this5","handleCloseDialog","handleJoinGroup","handleCreatePeerChat","handleCreateGroupChat","CreateChatDialog_TabList","CreateChatDialog_TableContent","RightClickDialog","closeConversation","handleClick","path","Error","removeEventListener","onDeleteConversation","onCloseConversation","top","y","left","x","dateFormat","date","time","newDate","Date","today","toDateString","dayList","1","2","3","4","5","6","0","year","String","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","getTime","getDay","EmitName","eventEmit","EventEmitter","ZIMKitMessageType","groupInfoOperation","showGroupInfo","emit","GroupInfoOperation","toastOperation","showToast","toastData","ToastOperation","dialogOperation","showBaseDialog","dialogData","DialogOperation","ConversationItem","switchConversation","operationConversation","setCurrentConversation","preventDefault","con","document","querySelector","onRightClick","showRightClickDialog","clientX","offsetLeft","clientY","offsetTop","conversationItem","slice","toLowerCase","unreadCountView","onContextMenu","nameFormat","timestamp","sentStatus","ConversationList","showCreateChatDialog","listScroll","triggerDialog","handleRightClick","handleDeleteConversation","handleCloseConversation","loadConversationList","registerIsLoggedInCallback","registerCvTotalUnreadMessageCountUpdatedCallback","registerCvListUpdatedCallback","registerCurrentCvUpdatedCallback","registerAbnormalCallback","unInit","msgElement","scrollTop","round","scrollHeight","clientHeight","loadNextPage","show","setTempConversation","userIDListArr","errorUserList","errorUserIDList","join","desc","cancelText","hasCloseBtn","code","_this6","_this$state$conversat","finally","_this7","totalView","createChatDialogView","rightClickDialogView","conversationListView","components_CreateChatDialog","components_RightClickDialog","UI_ConversationItem","onScroll","ZIMKitMessageModel","messageID","senderUserID","direction","conversationSeq","ZIMKitMessageVM","messageCount","messageIndex","currentChat","currentMessageList","fromConversationID","messageList","nextMessage","reverse","priority","msg","tipMsg","MessageView","oldScrollHeight","newScrollHeight","sendMessage","handleInputChange","getGroupUserName","scrollToBottom","triggerGroupInfo","registerLoginUserUpdatedCallback","registerCurrentChatUpdatedCallback","messageInput","focus","registerMessageListUpdatedCallback","Number","messageObj","groupIDUserName","member","currentMessage","currentIndex","previousMessage","_this$state2","_ZIMKitManager$getIns","chatContentView","Fragment","isReceive","isError","groupUserName","substr","GroupInfoView","copy","registerCurrentGroupInfoUpdateCallback","clipboard","writeText","groupInfoView","Toast","toastTimer","duration","prevProps","prevState","snapshot","clearTimeout","setTimeout","eventBus","toastView","_this$props$toastData","BaseDialog","closeHandle","cancelHandle","confirmHandle","cancelFunc","confirmFunc","dialogView","_this$props$dialogDat","title","confirmText","Common","handleGroupInfoOperation","handleToastOperation","handleDialogOperation","UI","ZIMKitMessage_UI","ZIMKitGroup_UI","components_Toast","components_BaseDialog","MainPage","registerConnectionStateChangedCallback","removeItem","ZIMKitCommon_UI","App","cacheUserInfo","createZIM","Main","Login","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","es","react_router_dom","pages_App","d","__webpack_exports__","zego_zim_web__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"8JACaA,EAAYC,YAAY,CACjCC,KAAM,OACNC,aAAc,CACVC,QAAQ,EACRC,YAAY,GAEhBC,SAAU,CACNC,aAAc,SAACC,EAAOC,GAClBD,EAAMJ,OAASK,EAAOC,SAE1BC,MAAO,SAACH,EAAOC,GACXD,EAAMH,YAAa,GAEvBO,OAAQ,SAACJ,EAAOC,GACZD,EAAMH,YAAa,QAIgBL,EAAUa,QAA1CN,iBAAcI,UAAOC,WACvBE,EAAmB,SAACN,GAAD,MAAY,CACxCJ,OAAQI,EAAMJ,OACdC,WAAYG,EAAMH,aAEPL,IAAf,QCrBae,EAAQC,YAAe,CAAEC,QAASjB,OAEjBkB,kECLfC,EAAA,CACX,MACA,UACA,QACA,QACA,WACA,QACA,QACA,OACA,SACA,QACA,QACA,UACA,QACA,OACA,SACA,OACA,YACA,QACA,SACA,SACA,SACA,SACA,QACA,QACA,MACA,SACA,SACA,MACA,OACA,YACA,UACA,SACA,QACA,UACA,SACA,SACA,SACA,WACA,SACA,SACA,SACA,MACA,UACA,QACA,UACA,WACA,QACA,QACA,QACA,UACA,UACA,SACA,QACA,OACA,QACA,QACA,SACA,UACA,UACA,SACA,UACA,UACA,UACA,QACA,UACA,UACA,UACA,WACA,QACA,OACA,WACA,SACA,UACA,YACA,QACA,UACA,UACA,YACA,QACA,SACA,SACA,SACA,QACA,YACA,QACA,SACA,QACA,aACA,YACA,OACA,QACA,WACA,UACA,UACA,QACA,OACA,OACA,QACA,SACA,UACA,OACA,QACA,UACA,UACA,QACA,SACA,UACA,QACA,QACA,UACA,UACA,QACA,SACA,OACA,QACA,UACA,SACA,OACA,QACA,SACA,SACA,SACA,WACA,YACA,OACA,QACA,OACA,OACA,QACA,SACA,OACA,QACA,OACA,OACA,OACA,QACA,SACA,QACA,SACA,SACA,aACA,MACA,SACA,SACA,QACA,QACA,MACA,QACA,WACA,UACA,QACA,YACA,YACA,OACA,QACA,YACA,UACA,YACA,OACA,OACA,UACA,SACA,SACA,QACA,WACA,UACA,YACA,SACA,UACA,QACA,UACA,QACA,SACA,OACA,QACA,UACA,UACA,QACA,SACA,QACA,QACA,MACA,MACA,SACA,QACA,OACA,OACA,SACA,MACA,aACA,OACA,QACA,OACA,QACA,SACA,OACA,WACA,QACA,SACA,UACA,OACA,KACA,MACA,SACA,SACA,UACA,QACA,QACA,YACA,MACA,QACA,SACA,OACA,QACA,QACA,SACA,OACA,OACA,QACA,OACA,YACA,MACA,QACA,YACA,QACA,UACA,OACA,QACA,SACA,SACA,MACA,QACA,OACA,QACA,SACA,UACA,OACA,SACA,UACA,QACA,UACA,OACA,MACA,OACA,WACA,SACA,OACA,QACA,QACA,OACA,QACA,QACA,WACA,SACA,QACA,QACA,SACA,WACA,aACA,QACA,SACA,SACA,WACA,UACA,SACA,OACA,OACA,UACA,QACA,SACA,MACA,MACA,QACA,UACA,QACA,WACA,QACA,WACA,YACA,SACA,UACA,UACA,YACA,SACA,UACA,QACA,QACA,OACA,SACA,SACA,SACA,OACA,QACA,QACA,QACA,UACA,YACA,QACA,SACA,SACA,OACA,OACA,QACA,QACA,QACA,UACA,SACA,WACA,OACA,QACA,SACA,UACA,MACA,OACA,SACA,UACA,WACA,QACA,QACA,QACA,WACA,YACA,SACA,UACA,UACA,QACA,QACA,QACA,YACA,WACA,SACA,SACA,WACA,SACA,MACA,UACA,SACA,QACA,SACA,OACA,OACA,UACA,OACA,WACA,WACA,UACA,OACA,OACA,SACA,UACA,QACA,SACA,WACA,SACA,QACA,OACA,QACA,aACA,SACA,SACA,SACA,SACA,UACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,YACA,QACA,QACA,UACA,UACA,SACA,OACA,UACA,QACA,SACA,OACA,QACA,UACA,UACA,OACA,QACA,QACA,SACA,QACA,MACA,MACA,SACA,UACA,UACA,QACA,OACA,QACA,QACA,WACA,QACA,SACA,WACA,SACA,SACA,QACA,QACA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","file":"static/js/main.1732f526.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nexport const authSlice = createSlice({\n    name: 'AUTH',\n    initialState: {\n        isInit: false,\n        isLoggedIn: false\n    },\n    reducers: {\n        initIMKitSDK: (state, action) => {\n            state.isInit = action.payload;\n        },\n        login: (state, action) => {\n            state.isLoggedIn = true;\n        },\n        logout: (state, action) => {\n            state.isLoggedIn = false;\n        }\n    }\n});\nexport const { initIMKitSDK, login, logout } = authSlice.actions;\nexport const selectIsLoggedIn = (state) => ({\n    isInit: state.isInit,\n    isLoggedIn: state.isLoggedIn\n});\nexport default authSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport authSlice from \"./authSlice\";\nexport const store = configureStore({ reducer: authSlice });\nexport const useAppDispatch = () => useDispatch();\nexport const useAppSelector = useSelector;\n","export default [\n    'Ada',\n    'Aaliyah',\n    'Aditi',\n    'Adela',\n    'Adelaide',\n    'Adele',\n    'Adora',\n    'Afra',\n    'Agatha',\n    'Agnes',\n    'Alani',\n    'Alberta',\n    'Alice',\n    'Alma',\n    'Althea',\n    'Alva',\n    'Alexandra',\n    'Alisa',\n    'Alison',\n    'Alyssa',\n    'Amanda',\n    'Amelia',\n    'Amity',\n    'Anila',\n    'Amy',\n    'Andrea',\n    'Angela',\n    'Ann',\n    'Anna',\n    'Annabelle',\n    'Antonia',\n    'Apphia',\n    'April',\n    'Arabela',\n    'Arlene',\n    'Ashley',\n    'Astrid',\n    'Atalanta',\n    'Athena',\n    'Audrey',\n    'Aurora',\n    'Ava',\n    'Barbara',\n    'Basia',\n    'Bblythe',\n    'Beatrice',\n    'Belen',\n    'Bella',\n    'Belle',\n    'Belinda',\n    'Bernice',\n    'Bertha',\n    'Beryl',\n    'Bess',\n    'Betsy',\n    'Betty',\n    'Beulah',\n    'Beverly',\n    'Blanche',\n    'Bonnie',\n    'Breenda',\n    'Brianna',\n    'Bridget',\n    'Brook',\n    'Calista',\n    'Camille',\n    'Candice',\n    'Candance',\n    'Carol',\n    'Cara',\n    'Caroline',\n    'Carlin',\n    'Caitlin',\n    'Catherine',\n    'Cathy',\n    'Cecilia',\n    'Celeste',\n    'Charlotte',\n    'Chaya',\n    'Cheryl',\n    'Cherry',\n    'Cheryl',\n    'Chloe',\n    'Christine',\n    'Clara',\n    'Claire',\n    'Clara',\n    'Clementine',\n    'Constance',\n    'Cora',\n    'Coral',\n    'Cornelia',\n    'Crystal',\n    'Cynthia',\n    'Daisy',\n    'Dale',\n    'Dana',\n    'Damla',\n    'Daphne',\n    'Darlene',\n    'Dawn',\n    'Debby',\n    'Deborah',\n    'Deirdre',\n    'Delia',\n    'Denise',\n    'Destiny',\n    'Diana',\n    'Dinah',\n    'Dolores',\n    'Dominic',\n    'Donna',\n    'Doreen',\n    'Dora',\n    'Doris',\n    'Dorothy',\n    'Eartha',\n    'Eden',\n    'Edith',\n    'Edwina',\n    'Eileen',\n    'Elaine',\n    'Eleanore',\n    'Elizabeth',\n    'Ella',\n    'Ellen',\n    'Elma',\n    'Elsa',\n    'Elsie',\n    'Elvira',\n    'Elva',\n    'Emily',\n    'Emma',\n    'Enid',\n    'Erin',\n    'Erica',\n    'Esther',\n    'Ethel',\n    'Eudora',\n    'Eunice',\n    'Evangeline',\n    'Eve',\n    'Evelyn',\n    'Faithe',\n    'Faith',\n    'Fanny',\n    'Fay',\n    'Flora',\n    'Florence',\n    'Frances',\n    'Freda',\n    'Frederica',\n    'Gabrielle',\n    'Gail',\n    'Gemma',\n    'Genevieve',\n    'Georgia',\n    'Geraldine',\n    'Gill',\n    'Gina',\n    'Giselle',\n    'Gladys',\n    'Gloria',\n    'Grace',\n    'Griselda',\n    'Gustave',\n    'Gwendolyn',\n    'Hannah',\n    'Harriet',\n    'Hazel',\n    'Heather',\n    'Hedda',\n    'Hedwig',\n    'Hedy',\n    'Helen',\n    'Heloise',\n    'Hermosa',\n    'Hilda',\n    'Hilary',\n    'Honey',\n    'Hulda',\n    'Ida',\n    'Ina',\n    'Ingrid',\n    'Irene',\n    'Iris',\n    'Irma',\n    'Isabel',\n    'Ivy',\n    'Jacqueline',\n    'Jade',\n    'Jamie',\n    'Jane',\n    'Janet',\n    'Janice',\n    'Jean',\n    'Jennifer',\n    'Jenny',\n    'Jessie',\n    'Jessica',\n    'Jill',\n    'Jo',\n    'Joa',\n    'Joanna',\n    'Joanne',\n    'Jocelyn',\n    'Jodie',\n    'Jolie',\n    'Josephine',\n    'Joy',\n    'Joyce',\n    'Judith',\n    'Judy',\n    'Julia',\n    'Julie',\n    'Juliet',\n    'June',\n    'Kama',\n    'Karen',\n    'Kate',\n    'Katherine',\n    'Kay',\n    'Kelly',\n    'Kimberley',\n    'Kitty',\n    'Kristin',\n    'Lara',\n    'Laura',\n    'Laurel',\n    'Lauren',\n    'Lee',\n    'Leila',\n    'Lena',\n    'Leona',\n    'Lesley',\n    'Letitia',\n    'Lila',\n    'Lilith',\n    'Lillian',\n    'Linda',\n    'Lindsay',\n    'Lisa',\n    'Liz',\n    'Lola',\n    'Lorraine',\n    'Louise',\n    'Lucy',\n    'Lyuba',\n    'Lydia',\n    'Lynn',\n    'Mabel',\n    'Madge',\n    'Madeline',\n    'Maggie',\n    'Mamie',\n    'Mandy',\n    'Marcia',\n    'Margaret',\n    'Marguerite',\n    'Maria',\n    'Marina',\n    'Marian',\n    'Marjorie',\n    'Martina',\n    'Martha',\n    'Mary',\n    'Maud',\n    'Maureen',\n    'Mavis',\n    'Maxine',\n    'Mag',\n    'May',\n    'Megan',\n    'Melissa',\n    'Meroy',\n    'Meredith',\n    'Merry',\n    'Michelle',\n    'Michaelia',\n    'Mignon',\n    'Mildred',\n    'Miranda',\n    'Mirabelle',\n    'Miriam',\n    'Modesty',\n    'Moira',\n    'Molly',\n    'Mona',\n    'Monica',\n    'Muriel',\n    'Murray',\n    'Myra',\n    'Myrna',\n    'Nancy',\n    'Naomi',\n    'Natalie',\n    'Natividad',\n    'Nelly',\n    'Nicole',\n    'Nicola',\n    'Nina',\n    'Nora',\n    'Norma',\n    'Novia',\n    'Nydia',\n    'Octavia',\n    'Odelia',\n    'Odelette',\n    'Olga',\n    'Olive',\n    'Olivia',\n    'Ophelia',\n    'Pag',\n    'Page',\n    'Pamela',\n    'Pandora',\n    'Patricia',\n    'Paula',\n    'Pearl',\n    'Penny',\n    'Penelope',\n    'Philipppa',\n    'Phoebe',\n    'Phoenix',\n    'Phyllis',\n    'Polly',\n    'Poppy',\n    'Prima',\n    'Priscilla',\n    'Prudence',\n    'Queena',\n    'Quanna',\n    'Quintina',\n    'Rachel',\n    'Rae',\n    'Rebecca',\n    'Regina',\n    'Renee',\n    'Renata',\n    'Rita',\n    'Riva',\n    'Roberta',\n    'Rose',\n    'Rosalind',\n    'Rosemary',\n    'Roxanne',\n    'Ruby',\n    'Ruth',\n    'Sabina',\n    'Sabrina',\n    'Sally',\n    'Salome',\n    'Samantha',\n    'Sandra',\n    'Sandy',\n    'Sara',\n    'Sarah',\n    'Sebastiane',\n    'Selena',\n    'Sharon',\n    'Sherry',\n    'Sheila',\n    'Shirley',\n    'Sibyl',\n    'Sigrid',\n    'Simona',\n    'Sophia',\n    'Spring',\n    'Stacey',\n    'Setlla',\n    'Stephanie',\n    'Susan',\n    'Susie',\n    'Susanna',\n    'Suzanne',\n    'Sylvia',\n    'Tara',\n    'Tabitha',\n    'Tammy',\n    'Teresa',\n    'Tess',\n    'Thera',\n    'Theresa',\n    'Tiffany',\n    'Tina',\n    'Tobey',\n    'Tracy',\n    'Trista',\n    'Truda',\n    'Ula',\n    'Una',\n    'Ursula',\n    'Valerie',\n    'Vanessa',\n    'Venus',\n    'Vera',\n    'Verna',\n    'Vicky',\n    'Victoria',\n    'Viola',\n    'Violet',\n    'Virginia',\n    'Vivien',\n    'Wallis',\n    'Wanda',\n    'Wendy',\n    'Winni',\n    'Winifred',\n    'Xanthe',\n    'Xaviera',\n    'Xenia',\n    'Xylia',\n    'Yedda',\n    'Yetta',\n    'Yuri',\n    'Yvette',\n    'Yvonne',\n    'Zara',\n    'Zenobia',\n    'Zoe',\n    'Zona',\n    'Zanna',\n    'Zora'\n];\n","import nameArr from './name';\nexport const getCacheUserInfo = () => {\n    return localStorage.userInfo\n        ? JSON.parse(localStorage.userInfo)\n        : null;\n};\nexport const setCacheUserInfo = (userInfo) => {\n    localStorage.setItem('userInfo', JSON.stringify(userInfo));\n};\nexport const clearCacheUserInfo = () => {\n    localStorage.removeItem('userInfo');\n};\nexport const getCacheUserList = () => {\n    return localStorage.userList\n        ? JSON.parse(localStorage.userList)\n        : null;\n};\nexport const addCacheUserToList = (userInfo) => {\n    let userList = localStorage.userList\n        ? JSON.parse(localStorage.userList)\n        : [];\n    const isExist = userList.find(item => userInfo.userID === item.userID);\n    !isExist && userList.push(userInfo);\n    localStorage.setItem('userList', JSON.stringify(userList));\n};\nexport const deleteCacheUserToList = () => { };\nexport const clearCacheUserList = () => { };\nexport const createRandomName = () => {\n    return nameArr[Math.floor(Math.random() * nameArr.length)];\n};\nexport const getUserName = (value) => {\n    const cacheUserList = getCacheUserList();\n    const randomName = createRandomName();\n    const result = {\n        userName: '',\n        verify: true\n    };\n    if (value.length >= 6 && value.length <= 12) {\n        if (cacheUserList && cacheUserList.some(item => item.userID === value)) {\n            result.userName = cacheUserList.filter(item => item.userID === value)[0].userName;\n        }\n        else {\n            result.userName = randomName;\n        }\n    }\n    else {\n        result.verify = false;\n        result.userName = randomName;\n    }\n    return result;\n};\n","import CryptoJS from \"crypto-js\";\nexport function generateToken(userID, seconds, appConfig) {\n    if (!userID)\n        return \"\";\n    console.log(\"===appid\", appConfig);\n    const time = (Date.now() / 1000) | 0;\n    const body = {\n        app_id: appConfig.appID,\n        user_id: userID,\n        nonce: (Math.random() * 2147483647) | 0,\n        ctime: time,\n        expire: time + (seconds || 7200),\n    };\n    const key = CryptoJS.enc.Utf8.parse(appConfig.serverSecret);\n    let iv = Math.random().toString().substring(2, 18);\n    if (iv.length < 16)\n        iv += iv.substring(0, 16 - iv.length);\n    const ciphertext = CryptoJS.AES.encrypt(JSON.stringify(body), key, {\n        iv: CryptoJS.enc.Utf8.parse(iv),\n    }).toString();\n    const ciphert = Uint8Array.from(Array.from(atob(ciphertext)).map((val) => val.charCodeAt(0)));\n    const len_ciphert = ciphert.length;\n    const uint8 = new Uint8Array(8 + 2 + 16 + 2 + len_ciphert);\n    uint8.set([0, 0, 0, 0]);\n    uint8.set(new Uint8Array(Int32Array.from([body.expire]).buffer).reverse(), 4);\n    uint8[8] = iv.length >> 8;\n    uint8[9] = iv.length - (uint8[8] << 8);\n    uint8.set(Uint8Array.from(Array.from(iv).map((val) => val.charCodeAt(0))), 10);\n    uint8[26] = len_ciphert >> 8;\n    uint8[27] = len_ciphert - (uint8[26] << 8);\n    uint8.set(ciphert, 28);\n    const token = `04${btoa(String.fromCharCode(...Array.from(uint8)))}`;\n    console.log(\"generateToken\", iv.length, body, token);\n    return token;\n}\nexport function getToken(userID, appConfig) {\n    return fetch(appConfig.tokenURL + userID)\n        .then((res) => res.json())\n        .then((res) => {\n        return res.token;\n    });\n}\n","export default {\n    appID: 2031514356,\n    serverSecret: \"\",\n    tokenURL: \"https://zimkit-demo.herokuapp.com/access_token?uid=\",\n};\n","export var EventName;\n(function (EventName) {\n    EventName[\"zimError\"] = \"error\";\n    EventName[\"zimConnectionStateChanged\"] = \"connectionStateChanged\";\n    EventName[\"zimTokenWillExpire\"] = \"tokenWillExpire\";\n    EventName[\"zimReceivePeerMessage\"] = \"receivePeerMessage\";\n    EventName[\"zimReceiveGroupMessage\"] = \"receiveGroupMessage\";\n    EventName[\"zimConversationTotalUnreadMessageCountUpdated\"] = \"conversationTotalUnreadMessageCountUpdated\";\n    EventName[\"zimConversationChanged\"] = \"conversationChanged\";\n    EventName[\"zimKitIsLoggedIn\"] = \"isLoggedIn\";\n    EventName[\"zimKitLoginUserUpdate\"] = \"loginUserUpdate\";\n    EventName[\"zimKitDeleteConversation\"] = \"deleteConversation\";\n    EventName[\"zimKitCurrentConversationUpdate\"] = \"currentConversationUpdate\";\n    EventName[\"zimKitConversationListUpdate\"] = \"conversationListUpdate\";\n    EventName[\"zimKitConversationListQueryAbnormally\"] = \"conversationListQueryAbnormally\";\n    EventName[\"zimKitCreateGroup\"] = \"createGroup\";\n    EventName[\"zimKitCurrentChatUpdated\"] = \"currentChatUpdated\";\n    EventName[\"zimKitCurrentMessageListUpdated\"] = \"messageListUpdated\";\n    EventName[\"zimKitCurrentGroupInfoUpdated\"] = \"currentGroupInfoUpdated\";\n})(EventName || (EventName = {}));\n","export class ZIMPlatformManage {\n    constructor(platform) {\n        this.platform = platform;\n    }\n}\n","import { ZIMPlatform } from './index.entity';\nimport { ZIMPlatformManage } from './platform';\nconst platform = process.env.PLATFORM || 'web';\nexport class ZIMAdapter {\n    static initPlatform() {\n        if (platform === 'web') {\n            ZIMAdapter.zimPlatformManage = new ZIMPlatformManage(ZIMPlatform.Web);\n            return import('./web').then(zimAdapter => {\n                ZIMAdapter.zimModule = zimAdapter.ZIMWeb;\n            });\n        }\n        else {\n            return Promise.resolve();\n        }\n    }\n    static getInstance() {\n        return ZIMAdapter.zimModule.getInstance();\n    }\n    static create(appID) {\n        return ZIMAdapter.zimModule.create(appID);\n    }\n    on(type, listener) {\n        return ZIMAdapter.getInstance().on(type, listener);\n    }\n    off(type) {\n        return ZIMAdapter.getInstance().off(type);\n    }\n    login(userInfo, token) {\n        return ZIMAdapter.getInstance().login(userInfo, token);\n    }\n    logout() {\n        return ZIMAdapter.getInstance().logout();\n    }\n    destroy() {\n        return ZIMAdapter.getInstance().destroy();\n    }\n    renewToken(token) {\n        return ZIMAdapter.getInstance().renewToken(token);\n    }\n    queryConversationList(config) {\n        return ZIMAdapter.getInstance().queryConversationList(config);\n    }\n    createGroup(groupInfo, userIDs, config) {\n        return ZIMAdapter.getInstance().createGroup(groupInfo, userIDs, config);\n    }\n    sendPeerMessage(message, toUserID, config) {\n        return ZIMAdapter.getInstance().sendPeerMessage(message, toUserID, config);\n    }\n    sendGroupMessage(message, toGroupID, config) {\n        return ZIMAdapter.getInstance().sendGroupMessage(message, toGroupID, config);\n    }\n    queryHistoryMessage(conversationID, conversationType, config) {\n        return ZIMAdapter.getInstance().queryHistoryMessage(conversationID, conversationType, config);\n    }\n    deleteConversation(conversationID, conversationType, config) {\n        return ZIMAdapter.getInstance().deleteConversation(conversationID, conversationType, config);\n    }\n    clearConversationUnreadMessageCount(conversationID, conversationType) {\n        return ZIMAdapter.getInstance().clearConversationUnreadMessageCount(conversationID, conversationType);\n    }\n    queryGroupInfo(groupID) {\n        return ZIMAdapter.getInstance().queryGroupInfo(groupID);\n    }\n    queryGroupMemberList(groupID, config) {\n        return ZIMAdapter.getInstance().queryGroupMemberList(groupID, config);\n    }\n    joinGroup(groupID) {\n        return ZIMAdapter.getInstance().joinGroup(groupID);\n    }\n    leaveGroup(groupID) {\n        return ZIMAdapter.getInstance().leaveGroup(groupID);\n    }\n}\n","import { EventName } from '../Constant/event';\nexport default class ZIMKitEventHandler {\n    constructor() {\n        this.eventList = {\n            [EventName.zimError]: [],\n            [EventName.zimConnectionStateChanged]: [],\n            [EventName.zimTokenWillExpire]: [],\n            [EventName.zimReceivePeerMessage]: [],\n            [EventName.zimReceiveGroupMessage]: [],\n            [EventName.zimConversationTotalUnreadMessageCountUpdated]: [],\n            [EventName.zimConversationChanged]: [],\n            [EventName.zimKitIsLoggedIn]: [],\n            [EventName.zimKitLoginUserUpdate]: [],\n            [EventName.zimKitDeleteConversation]: [],\n            [EventName.zimKitConversationListUpdate]: [],\n            [EventName.zimKitCurrentConversationUpdate]: [],\n            [EventName.zimKitConversationListQueryAbnormally]: [],\n            [EventName.zimKitCreateGroup]: [],\n            [EventName.zimKitCurrentChatUpdated]: [],\n            [EventName.zimKitCurrentMessageListUpdated]: [],\n            [EventName.zimKitCurrentGroupInfoUpdated]: []\n        };\n        if (!ZIMKitEventHandler.instance) {\n            ZIMKitEventHandler.instance = this;\n        }\n        return ZIMKitEventHandler.instance;\n    }\n    static getInstance() {\n        if (!ZIMKitEventHandler.instance) {\n            ZIMKitEventHandler.instance = new ZIMKitEventHandler();\n        }\n        return ZIMKitEventHandler.instance;\n    }\n    addEventListener(event, callBackList) {\n        if (!this.eventList[event]) {\n            return false;\n        }\n        if (!Array.isArray(callBackList)) {\n            return false;\n        }\n        callBackList.forEach(callBack => {\n            !this.eventList[event].includes(callBack) &&\n                this.eventList[event].push(callBack);\n        });\n        return true;\n    }\n    removeEventListener(event, callBackList) {\n        if (!this.eventList[event]) {\n            return false;\n        }\n        const li = this.eventList[event];\n        if (callBackList && callBackList.length) {\n            callBackList.forEach(callBack => {\n                li.splice(li.indexOf(callBack), 1);\n            });\n        }\n        else {\n            this.eventList[event] = [];\n        }\n        return true;\n    }\n    actionListener(event, ...args) {\n        this.eventList[event] &&\n            this.eventList[event].forEach(func => {\n                func(...args);\n            });\n    }\n}\n","export default {\n    common_yesterday: '昨天',\n    common_user_kick_out: '重复登录，用户被踢出',\n    common_monday: '周一',\n    common_tuesday: '周二',\n    common_wednesday: '周三',\n    common_thursday: '周四',\n    common_friday: '周五',\n    common_saturday: '周六',\n    common_sunday: '周日',\n    common_logout: '退出',\n    common_return: '返回',\n    conversation_start_chat_w: '发起聊天',\n    conversation_empty: '暂无消息\\n快去发起聊天吧',\n    conversation_start_single_chat: '发起单聊',\n    conversation_start_group_chat: '发起群聊',\n    conversation_join_group_chat: '加入群聊',\n    conversation_cancel: '取消',\n    conversation_delete: '删除',\n    conversation_message_total_count: '消息总数',\n    conversation_reload: '重新加载',\n    conversation_enter_touserid_w: '请输入对方用户ID',\n    conversation_close_chat_w: '关闭聊天',\n    demo_login_hint: '输入用户id',\n    demo_login: '登录',\n    demo_user_name: '用户名为:%s',\n    demo_user_name_w: '随机用户昵称',\n    demo_welcome: '您好，\\n欢迎使用 Zego IM',\n    demo_input_user_id_error_tips: '请输入6–12位英文或数字的用户ID',\n    demo_input_placeholder_w: '请输入6–12位英文或数字的用户ID',\n    demo_user_id_login: '用户ID登录',\n    group_create_chat: '发起会话',\n    group_input_group_id: '输入群ID',\n    group_input_group_id_w: '输入群聊ID',\n    group_input_group_name: '输入群聊名称',\n    group_input_user_id_of_group: \"输入群成员的用户ID，';'英文分号隔开\",\n    group_input_user_id_of_group_w: \"输入群成员的用户ID，';'英文分号隔开\",\n    group_user_id_cant_null: '用户id不能为空',\n    group_create_group_chat_title: '发起群聊会话',\n    group_join_group_chat: '加入群聊会话',\n    group_user_not_exit: '用户不存在',\n    group_group_not_exit: '群不存在',\n    group_group_user_id_not_exit: '群成员用户ID %s 不存在，请返回',\n    group_group_user_id_not_exit_w: '请返回修改',\n    group_group_id_not_exit: '群ID %s 不存在，请返回',\n    group_group_id_not_exit_w: '不存在，请返回修改',\n    group_input_user_id_error_tip: '请输入6–12位英文或数字的用户ID',\n    group_group_id: '群聊ID',\n    group_copy: '复制',\n    group_copy_success: '复制成功',\n    message_input_new_message: '输入新消息',\n    message_user_not_exit_please_again: '用户ID:%s不存在，请返回重新添加',\n    message_user_not_exit_please_again_w_1: '用户ID',\n    message_user_not_exit_please_again_w_2: '不存在，请返回重新添加',\n    message_cant_send_empty_msg: '不允许发送空白消息',\n    message_create_chat: '发起会话',\n    message_input_user_id_error_tips: '请输入6–12位英文或数字的用户ID',\n    message_create_single_chat: '发起单聊会话',\n    message_send_w: '发送',\n    message_empty_w: '暂时还没有收到消息'\n};\n","export default {\n    common_yesterday: 'Yesterday',\n    common_user_kick_out: 'The user is kicked out because the ID is reused for login. ',\n    common_monday: 'Monday',\n    common_tuesday: 'Tuesday',\n    common_wednesday: 'Wednesday',\n    common_thursday: 'Thursday',\n    common_friday: 'Friday',\n    common_saturday: 'Saturday',\n    common_sunday: 'Sunday',\n    common_logout: 'Log out',\n    common_return: 'Back',\n    conversation_start_chat_w: 'New Chat',\n    conversation_empty: 'No chats.\\nStart chatting now.',\n    conversation_start_single_chat: 'One-on-one chat',\n    conversation_start_group_chat: 'Group chat',\n    conversation_join_group_chat: 'Join a group',\n    conversation_cancel: 'Cancel',\n    conversation_delete: 'Delete',\n    conversation_message_total_count: 'Chats',\n    conversation_reload: 'Reload',\n    conversation_enter_touserid_w: 'Enter a user ID',\n    conversation_close_chat_w: 'Delete',\n    demo_login_hint: 'User ID',\n    demo_login: 'Log in',\n    demo_user_name: 'Username: %s',\n    demo_user_name_w: 'Random nickname',\n    demo_welcome: 'Hi, \\nwelcome to ZEGOCLOUD \\nIn-app Chat.',\n    demo_input_user_id_error_tips: 'The userID must be between 6-12 characters using letters and numbers.',\n    demo_input_placeholder_w: '6-12 bit userID, include letters and numbers',\n    demo_user_id_login: 'User Login',\n    group_create_chat: 'OK',\n    group_input_group_id: 'Group ID',\n    group_input_group_id_w: 'Group ID',\n    group_input_group_name: 'Group name',\n    group_input_user_id_of_group: \"Enter the user IDS of the group members, separated by ';'.\",\n    group_input_user_id_of_group_w: \"Enter the user IDS of the group members, separated by ';'.\",\n    group_user_id_cant_null: 'User ID is required.',\n    group_create_group_chat_title: 'New group chat',\n    group_join_group_chat: 'Join a group chat',\n    group_user_not_exit: \"The user doesn't exist.\",\n    group_group_not_exit: \"The group doesn't exist.\",\n    group_group_user_id_not_exit: \"The user ID (%s) doesn't exist. Please modify and try again.\",\n    group_group_user_id_not_exit_w: 'Please modify and try again.',\n    group_group_id_not_exit: \"The group (%s) doesn't exist. Please try again.\",\n    group_group_id_not_exit_w: \"It doesn't exist. Please modify and try again.\",\n    group_input_user_id_error_tip: 'The userID must be between 6-12 characters using letters and numbers.',\n    group_group_id: 'Group ID',\n    group_copy: 'Copy',\n    group_copy_success: 'Copied.',\n    message_input_new_message: '',\n    message_user_not_exit_please_again: \"The user ID (%s) doesn't exist. Please try again.\",\n    message_user_not_exit_please_again_w_1: 'User ID',\n    message_user_not_exit_please_again_w_2: \"It doesn't exist. Please try again.\",\n    message_cant_send_empty_msg: 'Blank messages are not allowed',\n    message_create_chat: 'OK',\n    message_input_user_id_error_tips: 'The userID must be between 6-12 characters using letters and numbers.',\n    message_create_single_chat: 'New 1-on-1 chat',\n    message_send_w: 'Send',\n    message_empty_w: 'No messages received.'\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport zh from '../../locales/zh';\nimport en from '../../locales/en';\nclass ZIMKiti18n {\n    constructor() {\n        this.localesData = {\n            en: {},\n            zh: {}\n        };\n        this.i18next = i18n.use(initReactI18next);\n        if (!ZIMKiti18n.instance) {\n            const localesData = { en, zh };\n            this.localesData = localesData;\n            ZIMKiti18n.instance = this;\n        }\n        return ZIMKiti18n.instance;\n    }\n    static getInstance() {\n        if (!ZIMKiti18n.instance) {\n            ZIMKiti18n.instance = new ZIMKiti18n();\n        }\n        return ZIMKiti18n.instance;\n    }\n    static destroy() {\n        ZIMKiti18n.instance.localesData = { en: {}, cn: {} };\n        ZIMKiti18n.instance = null;\n    }\n    init() {\n        const options = {\n            resources: {\n                zh: { translation: this.localesData.zh },\n                en: { translation: this.localesData.en }\n            },\n            fallbackLng: navigator.language,\n            detection: {\n                caches: ['localStorage', 'sessionStorage', 'cookie']\n            }\n        };\n        return this.i18next.init(options);\n    }\n    provideMessage(localesData) {\n        this.localesData.en = Object.assign(Object.assign({}, this.localesData.en), localesData.en);\n        this.localesData.zh = Object.assign(Object.assign({}, this.localesData.zh), localesData.zh);\n        return this.localesData;\n    }\n    getLocalesData() {\n        return this.localesData;\n    }\n    getI18next() {\n        return this.i18next;\n    }\n}\nexport default ZIMKiti18n;\n","import { ZIMAdapter } from \"../../ZIMAdapter\";\nimport ZIMKitEventHandler from \"./ZIMKitEventHandler\";\nimport { EventName } from \"../Constant/event\";\nimport ZIMKiti18n from \"../../../plugin/i18n\";\nZIMKiti18n.getInstance().init();\nexport default class ZIMKitManager {\n    constructor() {\n        this.eventHandler = ZIMKitEventHandler.getInstance();\n        this.userInfo = {};\n        this.isInit = false;\n        this.isLoggedIn = false;\n        if (!ZIMKitManager.instance) {\n            ZIMKitManager.instance = this;\n        }\n        return ZIMKitManager.instance;\n    }\n    static getInstance() {\n        if (!ZIMKitManager.instance) {\n            ZIMKitManager.instance = new ZIMKitManager();\n        }\n        return ZIMKitManager.instance;\n    }\n    createZIM(appID) {\n        return ZIMAdapter.initPlatform().then(() => {\n            this.zim = ZIMAdapter.create(appID);\n            this.isInit = true;\n            this.onEvent();\n            window.manager = this;\n        });\n    }\n    loginWithUserInfo(userInfo, token) {\n        this.userInfo = userInfo;\n        return this.zim.login(userInfo, token).then(() => {\n            this.token = token;\n            this.isLoggedIn = true;\n            this.eventHandler.actionListener(EventName.zimKitIsLoggedIn);\n            this.eventHandler.actionListener(EventName.zimKitLoginUserUpdate, userInfo);\n        });\n    }\n    logout() {\n        this.isLoggedIn = false;\n        this.token = \"\";\n        return this.zim.logout();\n    }\n    destroy() {\n        this.offEvent();\n        this.zim.destroy();\n        this.isInit = false;\n    }\n    registerConnectionStateChangedCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimConnectionStateChanged, [\n            callback,\n        ]);\n    }\n    onEvent() {\n        this.zim.on(EventName.zimError, (zim, errorInfo) => {\n            this.eventHandler.actionListener(EventName.zimError, errorInfo);\n        });\n        this.zim.on(EventName.zimConnectionStateChanged, (zim, data) => {\n            if (data.state === 0 && data.event === 3) {\n                this.zim.login(this.userInfo, this.token);\n            }\n            this.eventHandler.actionListener(EventName.zimConnectionStateChanged, data);\n        });\n        this.zim.on(EventName.zimReceivePeerMessage, (zim, data) => {\n            this.eventHandler.actionListener(EventName.zimReceivePeerMessage, data);\n        });\n        this.zim.on(EventName.zimReceiveGroupMessage, (zim, data) => {\n            this.eventHandler.actionListener(EventName.zimReceiveGroupMessage, data);\n        });\n        this.zim.on(EventName.zimConversationTotalUnreadMessageCountUpdated, (zim, data) => {\n            this.eventHandler.actionListener(EventName.zimConversationTotalUnreadMessageCountUpdated, data);\n        });\n        this.zim.on(EventName.zimConversationChanged, (zim, data) => {\n            this.eventHandler.actionListener(EventName.zimConversationChanged, data);\n        });\n    }\n    offEvent() {\n        this.zim.off(EventName.zimError);\n        this.zim.off(EventName.zimConversationChanged);\n        this.zim.off(EventName.zimTokenWillExpire);\n        this.zim.off(EventName.zimReceivePeerMessage);\n        this.zim.off(EventName.zimReceiveGroupMessage);\n        this.zim.off(EventName.zimConversationTotalUnreadMessageCountUpdated);\n    }\n}\n","import React, { FormEvent } from 'react';\nimport { connect } from 'react-redux';\nimport { login, selectIsLoggedIn } from '../../store/authSlice';\nimport { addCacheUserToList, getUserName, setCacheUserInfo } from '../../util';\nimport { getToken } from '../../util/token';\nimport appConfig from '../../config';\nimport ZIMKitManager from '../../ZIMKit/src/components/ZIMKitCommon/VM/ZIMKitManager';\nimport './style.css';\nimport { Navigate } from 'react-router-dom';\nimport { ZIMError } from '../../ZIMKit/src/components/ZIMAdapter/index.entity';\nimport ZIMKiti18n from '../../ZIMKit/src/plugin/i18n';\nconst i18n = ZIMKiti18n.getInstance().getI18next() as any;\n\nclass LoginPage extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = { userID: '', userName: '', verify: false };\n    this.getUserName = this.getUserName.bind(this);\n    this.loginFun = this.loginFun.bind(this);\n  }\n  componentDidMount(): void {\n    const result = getUserName('');\n    this.setState({ ...result });\n  }\n  getUserName(event: FormEvent) {\n    const userID = (event.target as HTMLInputElement).value;\n    const result = getUserName(userID);\n    this.setState({ userID, ...result });\n  }\n  loginFun() {\n    getToken(this.state.userID, appConfig).then(token => {\n      const userInfo = {\n        userID: this.state.userID,\n        userName: this.state.userName\n      };\n      ZIMKitManager.getInstance().loginWithUserInfo(userInfo, token).then(() => {\n        setCacheUserInfo(userInfo);\n        addCacheUserToList(userInfo);\n        this.props.login();\n      }).catch((error: ZIMError) => {\n        this.setState({ verify: false });\n      });\n    });\n  }\n  render() {\n    return (\n      <div id=\"login\">\n        {this.props.isLoggedIn && <Navigate to=\"/main\" replace={true} />}\n        <div className=\"login-box\">\n          <div className=\"welcome-box\">\n            <div className=\"welcome-text\">{i18n.t('demo_welcome')}</div>\n          </div>\n          <div className={`form ${i18n.language === 'en' ? 'en-form' : null}`}>\n            <div className=\"id\">\n              <div className=\"label\">{i18n.t('demo_user_id_login')}</div>\n              <input\n                className={i18n.language === 'en' ? 'en-input' : ''}\n                placeholder={i18n.t('demo_input_placeholder_w')}\n                onInput={this.getUserName}\n              />\n              <div\n                className=\"login-err-tip\"\n                style={{\n                  display:\n                    !this.state.verify && this.state.userID ? 'block' : 'none'\n                }}>\n                {i18n.t('demo_input_user_id_error_tips')}\n              </div>\n            </div>\n            <div className=\"name\">\n              <div className=\"label\">{i18n.t('demo_user_name_w')}</div>\n              <div id=\"userName\">{this.state.userName}</div>\n            </div>\n            <button\n              className=\"login-btn\"\n              onClick={this.loginFun}\n              disabled={!this.state.verify}>\n              {i18n.t('demo_login')}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: (arg0: { payload: any; type: string; }) => any) => {\n  return {\n    login: (content: any) => dispatch(login(content))\n  };\n};\n\nexport default connect(selectIsLoggedIn, mapDispatchToProps)(LoginPage);\n","export default class ZIMKitConversationModel {\n    constructor(conversation) {\n        this.conversationID = conversation.conversationID;\n        this.conversationName = conversation.conversationName;\n        this.type = conversation.type;\n        this.unreadMessageCount = conversation.unreadMessageCount;\n        this.lastMessage = conversation.lastMessage;\n        this.orderKey = conversation.orderKey;\n        this.notificationStatus = conversation.notificationStatus;\n    }\n}\n","import ZIMKitManager from \"../../ZIMKitCommon/VM/ZIMKitManager\";\nimport ZIMKitEventHandler from \"../../ZIMKitCommon/VM/ZIMKitEventHandler\";\nimport ZIMKitConversationModel from \"../Model\";\nimport { EventName } from \"../../ZIMKitCommon/Constant/event\";\nexport default class ZIMKitConversationVM {\n    constructor() {\n        this.eventHandler = ZIMKitEventHandler.getInstance();\n        this.pagePullCount = 100;\n        this.conversationList = [];\n        this.totalUnreadMessageCount = 0;\n        this.isAbnormal = false;\n        this.activeCvID = \"\";\n        this.loadStatus = 0;\n        if (!ZIMKitConversationVM.instance) {\n            ZIMKitConversationVM.instance = this;\n            ZIMKitConversationVM.instance.initListenerHandle();\n        }\n        return ZIMKitConversationVM.instance;\n    }\n    static getInstance() {\n        if (!ZIMKitConversationVM.instance) {\n            ZIMKitConversationVM.instance = new ZIMKitConversationVM();\n        }\n        return ZIMKitConversationVM.instance;\n    }\n    initListenerHandle() {\n        this.eventHandler.addEventListener(EventName.zimConversationTotalUnreadMessageCountUpdated, [\n            (data) => {\n                this.totalUnreadMessageCount = data.totalUnreadMessageCount;\n            },\n        ]);\n        this.eventHandler.addEventListener(EventName.zimConversationChanged, [\n            (data) => {\n                if (this.loadStatus !== 2) {\n                    return;\n                }\n                let updateListFlag = false;\n                let updateCurrentFlag = false;\n                data.infoList.forEach((info) => {\n                    switch (info.event) {\n                        case 1:\n                            if (this.conversationList.length) {\n                                let isExist = false;\n                                this.conversationList.forEach((item) => {\n                                    if (item.conversationID === info.conversation.conversationID) {\n                                        isExist = true;\n                                        Object.assign(item, info.conversation);\n                                        if (this.activeCvID === info.conversation.conversationID) {\n                                            updateCurrentFlag = true;\n                                        }\n                                        updateListFlag = true;\n                                    }\n                                });\n                                if (!isExist) {\n                                    this.conversationList.push(info.conversation);\n                                    updateListFlag = true;\n                                }\n                            }\n                            else {\n                                this.conversationList.push(info.conversation);\n                                this.activeCvID = info.conversation.conversationID;\n                                updateListFlag = true;\n                                updateCurrentFlag = true;\n                            }\n                            break;\n                        case 0:\n                            const len = this.conversationList.length;\n                            updateListFlag = this.insetConversationList(info.conversation);\n                            if (!len) {\n                                this.activeCvID = info.conversation.conversationID;\n                                updateCurrentFlag = true;\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                });\n                if (updateListFlag) {\n                    this.sortCvListHandle();\n                    this.eventHandler.actionListener(EventName.zimKitConversationListUpdate, this.conversationList);\n                }\n                if (updateCurrentFlag) {\n                    const currentConversation = this.getConversationByID(this.activeCvID);\n                    this.eventHandler.actionListener(EventName.zimKitCurrentConversationUpdate, currentConversation);\n                    currentConversation.unreadMessageCount &&\n                        this.clearConversationUnreadMessageCount(currentConversation.conversationID, currentConversation.type);\n                }\n            },\n        ]);\n    }\n    loadConversationList() {\n        const config = {\n            nextConversation: undefined,\n            count: localStorage.count || this.pagePullCount,\n        };\n        if (this.loadStatus === 1) {\n            return Promise.reject();\n        }\n        this.loadStatus = 1;\n        return ZIMKitManager.getInstance()\n            .zim.queryConversationList(config)\n            .then((data) => {\n            this.loadStatus = 2;\n            this.isAbnormal = false;\n            this.conversationList.length = 0;\n            data.conversationList.forEach((item) => {\n                if (item.type === 0 || item.type === 2) {\n                    this.conversationList.push(new ZIMKitConversationModel(item));\n                }\n            });\n            this.sortCvListHandle();\n            if (this.conversationList.length && !this.activeCvID) {\n                const firstConversation = this.conversationList[0];\n                this.activeCvID = firstConversation.conversationID;\n                this.clearConversationUnreadMessageCount(firstConversation.conversationID, firstConversation.type);\n            }\n            this.eventHandler.actionListener(EventName.zimKitConversationListUpdate, this.conversationList);\n            this.eventHandler.actionListener(EventName.zimKitCurrentConversationUpdate, this.getConversationByID(this.activeCvID));\n            this.eventHandler.actionListener(EventName.zimKitConversationListQueryAbnormally, false);\n        })\n            .catch((error) => {\n            this.loadStatus = 2;\n            this.isAbnormal = true;\n            this.eventHandler.actionListener(EventName.zimKitConversationListQueryAbnormally, true);\n        });\n    }\n    setCurrentConversation(conversationID) {\n        this.activeCvID = conversationID;\n        this.eventHandler.actionListener(EventName.zimKitCurrentConversationUpdate, this.getConversationByID(conversationID));\n    }\n    setTempConversation(conversation) {\n        this.activeCvID = conversation.conversationID;\n        this.eventHandler.actionListener(EventName.zimKitCurrentConversationUpdate, conversation);\n    }\n    loadNextPage() {\n        const config = {\n            nextConversation: this.conversationList[this.conversationList.length - 1],\n            count: this.pagePullCount,\n        };\n        ZIMKitManager.getInstance()\n            .zim.queryConversationList(config)\n            .then((data) => {\n            data.conversationList.forEach((item) => {\n                if (item.type === 0 || item.type === 2) {\n                    this.conversationList.push(new ZIMKitConversationModel(item));\n                }\n            });\n            this.sortCvListHandle();\n            this.eventHandler.actionListener(EventName.zimKitConversationListUpdate, this.conversationList);\n        });\n    }\n    deleteConversation(conversationID, conversationType) {\n        const config = { isAlsoDeleteServerConversation: true };\n        return ZIMKitManager.getInstance()\n            .zim.deleteConversation(conversationID, conversationType, config)\n            .then((data) => {\n            this.conversationList.forEach((item, index) => {\n                if (item.conversationID === data.conversationID) {\n                    this.conversationList.splice(index, 1);\n                }\n            });\n            if (conversationID === this.activeCvID &&\n                this.conversationList.length) {\n                this.activeCvID = this.conversationList[0].conversationID;\n                this.eventHandler.actionListener(EventName.zimKitCurrentConversationUpdate, this.conversationList[0]);\n            }\n            this.eventHandler.actionListener(EventName.zimKitConversationListUpdate, this.conversationList);\n            this.eventHandler.actionListener(EventName.zimKitDeleteConversation, conversationID);\n            return data;\n        });\n    }\n    removeData() { }\n    clearConversationUnreadMessageCount(conversationID, conversationType) {\n        return ZIMKitManager.getInstance()\n            .zim.clearConversationUnreadMessageCount(conversationID, conversationType)\n            .catch((error) => {\n            console.error(error);\n        });\n    }\n    registerIsLoggedInCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimKitIsLoggedIn, [callback]);\n    }\n    registerCvTotalUnreadMessageCountUpdatedCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimConversationTotalUnreadMessageCountUpdated, [callback]);\n    }\n    registerCvListUpdatedCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimKitConversationListUpdate, [\n            callback,\n        ]);\n    }\n    registerAbnormalCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimKitConversationListQueryAbnormally, [callback]);\n    }\n    registerCurrentCvUpdatedCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimKitCurrentConversationUpdate, [callback]);\n    }\n    unInit() {\n        this.conversationList.length = 0;\n        this.totalUnreadMessageCount = 0;\n        this.isAbnormal = false;\n        this.activeCvID = \"\";\n        this.loadStatus = 0;\n    }\n    getConversationByID(conversationID) {\n        return this.conversationList.filter((conversation) => conversation.conversationID === conversationID)[0];\n    }\n    insetConversationList(insetConversation) {\n        let result = false;\n        const isExist = this.conversationList.find((conversation) => insetConversation.conversationID === conversation.conversationID);\n        if (isExist === undefined) {\n            this.conversationList.push(insetConversation);\n            result = true;\n        }\n        return result;\n    }\n    sortCvListHandle() {\n        this.conversationList.sort((a, b) => b.orderKey - a.orderKey);\n    }\n}\n","import { EventName } from \"../../ZIMKitCommon/Constant/event\";\nimport ZIMKitEventHandler from \"../../ZIMKitCommon/VM/ZIMKitEventHandler\";\nimport ZIMKitManager from \"../../ZIMKitCommon/VM/ZIMKitManager\";\nexport default class ZIMKitGroupVM {\n    constructor() {\n        this.eventHandler = ZIMKitEventHandler.getInstance();\n        this.memberList = [];\n        if (!ZIMKitGroupVM.instance) {\n            ZIMKitGroupVM.instance = this;\n            ZIMKitGroupVM.instance.initListenerHandle();\n        }\n        return ZIMKitGroupVM.instance;\n    }\n    static getInstance() {\n        if (!ZIMKitGroupVM.instance) {\n            ZIMKitGroupVM.instance = new ZIMKitGroupVM();\n        }\n        return ZIMKitGroupVM.instance;\n    }\n    initListenerHandle() {\n        this.eventHandler.addEventListener(EventName.zimKitCreateGroup, [() => { }]);\n        this.eventHandler.addEventListener(EventName.zimKitCurrentConversationUpdate, [\n            (conversation) => {\n                if (!conversation)\n                    return;\n                if (conversation.type === 2) {\n                    this.currentGroupInfo = {\n                        baseInfo: {\n                            groupID: conversation.conversationID,\n                            groupName: conversation.conversationName,\n                        },\n                    };\n                    this.eventHandler.actionListener(EventName.zimKitCurrentGroupInfoUpdated, this.currentGroupInfo);\n                    this.queryGroupMemberList(conversation.conversationID);\n                }\n            },\n        ]);\n    }\n    createGroup(groupID, groupName, userIDList) {\n        const currentGroupInfo = { groupID, groupName };\n        return ZIMKitManager.getInstance()\n            .zim.createGroup(currentGroupInfo, userIDList)\n            .then((data) => {\n            this.currentGroupInfo = data.groupInfo;\n            this.eventHandler.actionListener(EventName.zimKitCurrentGroupInfoUpdated, this.currentGroupInfo);\n            return data;\n        });\n    }\n    queryGroupMemberList(groupID) {\n        const config = { count: 100, nextFlag: 0 };\n        return ZIMKitManager.getInstance()\n            .zim.queryGroupMemberList(groupID, config)\n            .then((data) => {\n            this.memberList = data.userList;\n        });\n    }\n    joinGroup(groupID) {\n        return ZIMKitManager.getInstance()\n            .zim.joinGroup(groupID)\n            .then((data) => {\n            this.currentGroupInfo = data.groupInfo;\n            this.eventHandler.actionListener(EventName.zimKitCurrentGroupInfoUpdated, this.currentGroupInfo);\n            return data;\n        });\n    }\n    leaveGroup(groupID) {\n        return ZIMKitManager.getInstance().zim.leaveGroup(groupID);\n    }\n    dismissGroup(groupID) { }\n    inviteUsersJoinGroup(userIDList, groupID) { }\n    kickGroupMembers(userIDList, groupID) { }\n    queryGroupInfo(groupID) {\n        return ZIMKitManager.getInstance().zim.queryGroupInfo(groupID);\n    }\n    unInit() {\n        this.currentGroupInfo = null;\n        this.memberList.length = 0;\n    }\n    registerCurrentGroupInfoUpdateCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimKitCurrentGroupInfoUpdated, [callback]);\n    }\n}\n","import React, { FormEvent } from 'react';\nimport './../../common.css';\nimport './style.css';\nimport ZIMKiti18n from '../../../../../plugin/i18n';\nconst i18n = ZIMKiti18n.getInstance().getI18next() as any;\n\ninterface TabData {\n  id: number;\n  text: string;\n  actived?: boolean;\n}\n\nclass TabItem extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.changeNav = this.changeNav.bind(this);\n  }\n  changeNav() {\n    this.props.onNavChange(this.props.item);\n  }\n  render() {\n    return (\n      <div\n        className={'title' + (this.props.item.actived ? ' actived' : '')}\n        onClick={this.changeNav}>\n        {this.props.item.text}\n      </div>\n    );\n  }\n}\n\nclass TabList extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      tabList: (this.props.tabList as TabData[]).map((element, index) => {\n        return { ...element, actived: !index ? true : false };\n      })\n    };\n    this.handleNavChange = this.handleNavChange.bind(this);\n  }\n  handleNavChange(current: TabData) {\n    (this.state.tabList as TabData[]).forEach(item => {\n      item.actived = item.id === current.id;\n    });\n    this.setState({\n      tabList: this.state.tabList\n    });\n    this.props.onNavChange(current);\n  }\n  render() {\n    let tabListView = null;\n    if (this.state.tabList) {\n      tabListView = (this.state.tabList as TabData[]).map(element => (\n        <TabItem\n          key={element.id}\n          item={element}\n          onNavChange={this.handleNavChange}\n        />\n      ));\n    }\n    return <div className=\"top\">{tabListView}</div>;\n  }\n}\n\nclass TableContent extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      peerErrTip: false,\n      peerDisabled: true,\n      groupErrTip: false,\n      groupDisabled: true,\n      groupID: '',\n      toUserID: '',\n      groupName: '',\n      userIDList: ''\n    };\n    this.closeDialog = this.closeDialog.bind(this);\n    this.createPeerChat = this.createPeerChat.bind(this);\n    this.createGroupChat = this.createGroupChat.bind(this);\n    this.joinGroup = this.joinGroup.bind(this);\n    this.handleUserIDInputChange = this.handleUserIDInputChange.bind(this);\n    this.handleGroupUserIDInputChange = this.handleGroupUserIDInputChange.bind(\n      this\n    );\n    this.handleGroupIDInputChange = this.handleGroupIDInputChange.bind(this);\n    this.handleGroupNameInputChange = this.handleGroupNameInputChange.bind(\n      this\n    );\n  }\n  closeDialog() {\n    this.props.onCloseDialog();\n  }\n  createPeerChat() {\n    this.props.onCreatePeerChat(this.state.toUserID);\n  }\n  createGroupChat() {\n    this.props.onCreateGroupChat(this.state.groupName, this.state.userIDList);\n  }\n  joinGroup() {\n    this.props.onJoinGroup(this.state.groupID);\n  }\n  handleUserIDInputChange(event: FormEvent) {\n    const toUserID = (event.target as HTMLInputElement).value;\n    if (toUserID.length) {\n      const result = toUserID.length < 6 || toUserID.length > 12;\n      this.setState({\n        toUserID,\n        peerErrTip: result,\n        peerDisabled: result\n      });\n    } else {\n      this.setState({\n        toUserID,\n        peerErrTip: false,\n        peerDisabled: true\n      });\n    }\n  }\n  handleGroupUserIDInputChange(event: FormEvent) {\n    const userIDList = (event.target as HTMLInputElement).value;\n    let groupDisabled = true,\n      groupErrTip = true;\n    if (this.state.groupName.length && userIDList.length) {\n      groupDisabled = false;\n    }\n    if (userIDList) {\n      const arr = userIDList.split(';');\n      let flag = false;\n      arr.forEach(item => {\n        if (item.length < 6 || item.length > 12) {\n          flag = true;\n          groupDisabled = true;\n        }\n      });\n      groupErrTip = flag;\n    } else {\n      groupErrTip = false;\n    }\n    this.setState({\n      userIDList,\n      groupErrTip,\n      groupDisabled\n    });\n  }\n  handleGroupIDInputChange(event: FormEvent) {\n    this.setState({\n      groupID: (event.target as HTMLInputElement).value\n    });\n  }\n  handleGroupNameInputChange(event: FormEvent) {\n    const groupName = (event.target as HTMLInputElement).value\n    this.setState({\n      groupName,\n      groupDisabled: !(groupName.length && this.state.userIDList.length)\n    });\n  }\n  render() {\n    let tableContentView = null;\n    let errTipView = null;\n    const {\n      groupID,\n      peerDisabled,\n      groupDisabled,\n      peerErrTip,\n      groupErrTip,\n      toUserID,\n      userIDList\n    } = this.state;\n    const { currentActived } = this.props;\n    if ((peerErrTip && toUserID) || (groupErrTip && userIDList)) {\n      // @ts-ignore\n      errTipView = (\n        <div className=\"err-tip\">{i18n.t('demo_input_user_id_error_tips')}</div>\n      );\n    }\n    if (currentActived === 1) {\n      // @ts-ignore\n      tableContentView = (\n        <div className=\"peer\" key=\"peer\">\n          <div className=\"input-box\">\n            <input\n              className={i18n.language === 'en' ? 'en-input' : ''}\n              type=\"text\"\n              name=\"userID\"\n              placeholder={i18n.t('conversation_enter_touserid_w')}\n              onInput={this.handleUserIDInputChange}\n            />\n            {errTipView}\n          </div>\n          <div className=\"btn-box\">\n            <button className=\"btn cancel-btn\" onClick={this.closeDialog}>\n              {i18n.t('conversation_cancel')}\n            </button>\n            <button\n              className=\"btn create-peer-btn\"\n              onClick={this.createPeerChat}\n              disabled={peerDisabled}>\n              {i18n.t('conversation_start_single_chat')}\n            </button>\n          </div>\n        </div>\n      );\n    } else if (currentActived === 2) {\n      // @ts-ignore\n      tableContentView = (\n        <div className=\"group\" key=\"group\">\n          <div className=\"input-box\">\n            <input\n              className={i18n.language === 'en' ? 'en-input' : ''}\n              type=\"text\"\n              name=\"groupName\"\n              placeholder={i18n.t('group_input_group_name')}\n              onInput={this.handleGroupNameInputChange}\n              maxLength={12}\n            />\n            <input\n              className={i18n.language === 'en' ? 'en-input' : ''}\n              type=\"text\"\n              name=\"userIDList\"\n              placeholder={i18n.t('group_input_user_id_of_group_w')}\n              onInput={this.handleGroupUserIDInputChange}\n            />\n            {errTipView}\n          </div>\n          <div className=\"btn-box\">\n            <button className=\"btn cancel-btn\" onClick={this.closeDialog}>\n              {i18n.t('conversation_cancel')}\n            </button>\n            <button\n              className=\"btn create-peer-btn\"\n              onClick={this.createGroupChat}\n              disabled={groupDisabled}>\n              {i18n.t('conversation_start_group_chat')}\n            </button>\n          </div>\n        </div>\n      );\n    } else if (currentActived === 3) {\n      // @ts-ignore\n      tableContentView = (\n        <div className=\"attend\" key=\"attend\">\n          <div className=\"input-box\">\n            <input\n              className={i18n.language === 'en' ? 'en-input' : ''}\n              type=\"text\"\n              name=\"groupID\"\n              placeholder={i18n.t('group_input_group_id_w')}\n              onInput={this.handleGroupIDInputChange}\n            />\n          </div>\n          <div className=\"btn-box\">\n            <button className=\"btn cancel-btn\" onClick={this.closeDialog}>\n              {i18n.t('conversation_cancel')}\n            </button>\n            <button\n              className=\"btn create-peer-btn\"\n              onClick={this.joinGroup}\n              disabled={!groupID}>\n              {i18n.t('conversation_join_group_chat')}\n            </button>\n          </div>\n        </div>\n      );\n    }\n    return <div className=\"content\">{tableContentView}</div>;\n  }\n}\n\nclass CreateChatDialog extends React.Component<any, any> {\n  tabList = [\n    {\n      id: 1,\n      text: i18n.t('conversation_start_single_chat')\n    },\n    {\n      id: 2,\n      text: i18n.t('conversation_start_group_chat')\n    },\n    {\n      id: 3,\n      text: i18n.t('conversation_join_group_chat')\n    }\n  ];\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      currentActived: 1\n    };\n    this.handleNavChange = this.handleNavChange.bind(this);\n    this.handleCloseDialog = this.handleCloseDialog.bind(this);\n    this.handleJoinGroup = this.handleJoinGroup.bind(this);\n    this.handleCreatePeerChat = this.handleCreatePeerChat.bind(this);\n    this.handleCreateGroupChat = this.handleCreateGroupChat.bind(this);\n  }\n  handleNavChange(current: TabData) {\n    this.setState({\n      currentActived: current.id\n    });\n  }\n  handleCloseDialog() {\n    this.props.onCloseDialog();\n  }\n  handleJoinGroup(groupID: string) {\n    this.props.onJoinGroup(groupID);\n  }\n  handleCreatePeerChat(toUserID: string) {\n    this.props.onCreatePeerChat(toUserID);\n  }\n  handleCreateGroupChat(groupName: string, userIDList: string) {\n    this.props.onCreateGroupChat(groupName, userIDList);\n  }\n  render() {\n    return (\n      <div className=\"dialog\">\n        <TabList tabList={this.tabList} onNavChange={this.handleNavChange} />\n        <TableContent\n          currentActived={this.state.currentActived}\n          onCloseDialog={this.handleCloseDialog}\n          onJoinGroup={this.handleJoinGroup}\n          onCreatePeerChat={this.handleCreatePeerChat}\n          onCreateGroupChat={this.handleCreateGroupChat}\n        />\n      </div>\n    );\n  }\n}\n\nexport default CreateChatDialog;\n","import React from \"react\";\nimport './../../common.css'\nimport './style.css'\nimport ZIMKiti18n from '../../../../../plugin/i18n';\nconst i18n = ZIMKiti18n.getInstance().getI18next() as any;\n\nclass RightClickDialog extends React.Component<any, any> {\n    constructor (props: any) {\n        super(props);\n        this.deleteConversation = this.deleteConversation.bind(this);\n        this.closeConversation = this.closeConversation.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick(event: MouseEvent) {\n        let flag = false;\n        try {\n            ((event as any).path as HTMLElement[]).forEach(path => {\n                if (path.className && path.className.includes(\"right-click-box\")) {\n                    flag = true;\n                    throw new Error(\"break\");\n                }\n            })\n        } catch (error) { }\n        if (!flag) {\n            this.closeConversation();\n        }\n    }\n    componentDidMount(): void {\n        window.addEventListener(\"click\", this.handleClick);\n    }\n    componentWillUnmount(): void {\n        window.removeEventListener(\"click\", this.handleClick)\n    }\n    deleteConversation() {\n        this.props.onDeleteConversation();\n    }\n    closeConversation() {\n        this.props.onCloseConversation();\n    }\n    render() {\n        return (<div className=\"right-click-box\" style={{ top: `${this.props.y}px`, left: `${this.props.x}px` }}>\n            <div className=\"item\" onClick={ this.deleteConversation }>{ i18n.t(\"conversation_close_chat_w\") }</div>\n        </div>)\n    }\n}\n\nexport default RightClickDialog;","import ZIMKiti18n from '../../../plugin/i18n';\nconst i18n = ZIMKiti18n.getInstance().getI18next();\nexport function dateFormat(date, time) {\n    if (date === 0)\n        return '--';\n    const newDate = new Date(date);\n    const today = new Date(new Date().toDateString());\n    const dayList = {\n        1: i18n.t('common_monday'),\n        2: i18n.t('common_tuesday'),\n        3: i18n.t('common_wednesday'),\n        4: i18n.t('common_thursday'),\n        5: i18n.t('common_friday'),\n        6: i18n.t('common_saturday'),\n        0: i18n.t('common_sunday')\n    };\n    const year = String(newDate.getFullYear());\n    let month = String(newDate.getMonth() + 1);\n    if (month.length < 1) {\n        month = `0${month}`;\n    }\n    let day = String(newDate.getDate());\n    if (day.length === 1) {\n        day = `0${day}`;\n    }\n    let hours = String(newDate.getHours());\n    if (hours.length === 1) {\n        hours = `0${hours}`;\n    }\n    let minutes = String(newDate.getMinutes());\n    if (minutes.length === 1) {\n        minutes = `0${minutes}`;\n    }\n    let seconds = String(newDate.getSeconds());\n    if (seconds.length === 1) {\n        seconds = `0${seconds}`;\n    }\n    let result;\n    if (newDate.getFullYear() !== today.getFullYear()) {\n        if (time) {\n            result = 'yyyy-MM-dd hh:mm'\n                .replace(/yyyy/g, year)\n                .replace(/MM/g, month)\n                .replace(/dd/g, day)\n                .replace(/hh/g, hours)\n                .replace(/mm/g, minutes);\n        }\n        else {\n            result = 'yyyy-MM-dd'\n                .replace(/yyyy/g, year)\n                .replace(/MM/g, month)\n                .replace(/dd/g, day);\n        }\n    }\n    else {\n        const lastWeek = today.getTime() - 518400000;\n        if (date < lastWeek) {\n            if (time) {\n                result = 'MM-dd hh:mm'\n                    .replace(/MM/g, month)\n                    .replace(/dd/g, day)\n                    .replace(/hh/g, hours)\n                    .replace(/mm/g, minutes);\n            }\n            else {\n                result = 'MM-dd'.replace(/MM/g, month).replace(/dd/g, day);\n            }\n        }\n        else {\n            const beforeYesterday = today.getTime() - 86400000;\n            if (date < beforeYesterday) {\n                if (time) {\n                    result =\n                        dayList[newDate.getDay()] +\n                            ' ' +\n                            'hh:mm'.replace(/hh/g, hours).replace(/mm/g, minutes);\n                }\n                else {\n                    result = dayList[newDate.getDay()];\n                }\n            }\n            else {\n                if (date < today.getTime()) {\n                    if (time) {\n                        result =\n                            `${i18n.t('common_yesterday')} ` +\n                                'hh:mm'.replace(/hh/g, hours).replace(/mm/g, minutes);\n                    }\n                    else {\n                        result = i18n.t('common_yesterday');\n                    }\n                }\n                else {\n                    result = 'hh:mm'.replace(/hh/g, hours).replace(/mm/g, minutes);\n                }\n            }\n        }\n    }\n    return result;\n}\n","import { EventEmitter } from 'events';\nconst eventEmit = new EventEmitter();\nexport var EmitName;\n(function (EmitName) {\n    EmitName[\"ToastOperation\"] = \"toastOperation\";\n    EmitName[\"DialogOperation\"] = \"dialogOperation\";\n    EmitName[\"GroupInfoOperation\"] = \"groupInfoOperation\";\n})(EmitName || (EmitName = {}));\nexport const groupInfoOperation = (showGroupInfo) => {\n    eventEmit.emit(EmitName.GroupInfoOperation, showGroupInfo);\n};\nexport const toastOperation = (showToast, toastData) => {\n    eventEmit.emit(EmitName.ToastOperation, showToast, toastData);\n};\nexport const dialogOperation = (showBaseDialog, dialogData) => {\n    eventEmit.emit(EmitName.DialogOperation, showBaseDialog, dialogData);\n};\nexport default eventEmit;\n","export default class ZIMKitMessageModel {\n    constructor(message) {\n        this.type = message.type;\n        this.messageID = message.messageID;\n        this.timestamp = message.timestamp;\n        this.message = message.message;\n        this.senderUserID = message.senderUserID;\n        this.conversationID = message.conversationID;\n        this.conversationType = message.conversationType;\n        this.direction = message.direction;\n        this.sentStatus = message.sentStatus;\n        this.orderKey = message.orderKey;\n        this.conversationSeq = message.conversationSeq;\n    }\n}\nexport var ZIMKitMessageType;\n(function (ZIMKitMessageType) {\n    ZIMKitMessageType[ZIMKitMessageType[\"Tip\"] = 99] = \"Tip\";\n})(ZIMKitMessageType || (ZIMKitMessageType = {}));\n","import React from 'react';\nimport ZIMKitManager from '../../ZIMKitCommon/VM/ZIMKitManager';\nimport ZIMKitConversationVM from '../VM/ZIMKitConversation';\nimport ZIMKitGroupVM from '../../ZIMKitGroup/VM/ZIMKitGroupVM';\nimport CreateChatDialog from '../../ZIMKitCommon/UI/components/CreateChatDialog';\nimport RightClickDialog from '../../ZIMKitCommon/UI/components/RightClickDialog';\nimport './style.css';\nimport ZIMKitConversationModel from '../Model';\nimport { dateFormat } from '../../ZIMKitCommon/ToolUtil/dateFormat';\nimport { ZIMError, ZIMGroupCreatedResult } from '../../ZIMAdapter/index.entity';\nimport {\n  dialogOperation,\n  toastOperation\n} from '../../ZIMKitCommon/ToolUtil/eventBus';\nimport ZIMKiti18n from '../../../plugin/i18n';\nconst i18n = ZIMKiti18n.getInstance().getI18next() as any;\n\ninterface RightClickData {\n  showRightClickDialog: boolean;\n  x: number;\n  y: number;\n  conversationItem: ZIMKitConversationModel;\n}\n\nclass ConversationItem extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.switchConversation = this.switchConversation.bind(this);\n    this.operationConversation = this.operationConversation.bind(this);\n  }\n  switchConversation() {\n    const { conversation } = this.props;\n    ZIMKitConversationVM.getInstance().setCurrentConversation(\n      conversation.conversationID\n    );\n    ZIMKitConversationVM.getInstance().clearConversationUnreadMessageCount(\n      conversation.conversationID,\n      conversation.type\n    );\n  }\n  operationConversation(event: any) {\n    event.preventDefault();\n\n    const con = document.querySelector(\n      '.zego-im-container .box'\n    ) as HTMLElement;\n    this.props.onRightClick({\n      showRightClickDialog: true,\n      x: event.clientX - con.offsetLeft,\n      y: event.clientY - con.offsetTop,\n      conversationItem: this.props.conversation\n    });\n  }\n  nameFormat(item: ZIMKitConversationModel) {\n    return (item.conversationName || item.conversationID)\n      .slice(0, 1)\n      .toLowerCase();\n  }\n  render() {\n    let unreadCountView: any = null;\n    const conversation = this.props.conversation;\n    const currentConversation = this.props.currentConversation;\n    if (conversation.unreadMessageCount) {\n      unreadCountView = (\n        <div className=\"unread-count\">\n          {conversation.unreadMessageCount > 99\n            ? '99+'\n            : conversation.unreadMessageCount}\n        </div>\n      );\n    }\n    return (\n      <div\n        className={\n          'conversation-item' +\n          (currentConversation &&\n          conversation.conversationID === currentConversation.conversationID\n            ? ' actived'\n            : '')\n        }\n        onClick={this.switchConversation}\n        onContextMenu={this.operationConversation}>\n        <div className=\"head-portrait\">\n          {conversation.type === 0 ? this.nameFormat(conversation) : 'G'}\n          {unreadCountView}\n        </div>\n        <div className=\"conversation-info\">\n          <div className=\"info-top\">\n            <div className=\"item-name\">\n              {conversation.conversationName || conversation.conversationID}\n            </div>\n            {conversation.lastMessage ? (\n              <div className=\"item-date\">\n                {dateFormat(conversation.lastMessage.timestamp, false)}\n              </div>\n            ) : null}\n          </div>\n          {conversation.lastMessage ? (\n            <div className=\"item-message\">\n              {conversation.lastMessage.sentStatus === 2 ? (\n                <div className=\"err-icon\"></div>\n              ) : null}\n              <div className=\"message-text\">\n                {conversation.lastMessage.message}\n              </div>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass ConversationList extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      isAbnormal: false,\n      totalUnreadMessageCount: 0,\n      conversationList: [],\n      showCreateChatDialog: false,\n      showRightClickDialog: false,\n      x: 0,\n      y: 0,\n      conversationItem: null, // Right click conversation\n      currentConversation: null\n    };\n    this.logout = this.logout.bind(this);\n    this.listScroll = this.listScroll.bind(this);\n    this.triggerDialog = this.triggerDialog.bind(this);\n    this.handleRightClick = this.handleRightClick.bind(this);\n    this.handleCloseDialog = this.handleCloseDialog.bind(this);\n    this.handleCreatePeerChat = this.handleCreatePeerChat.bind(this);\n    this.handleCreateGroupChat = this.handleCreateGroupChat.bind(this);\n    this.handleJoinGroup = this.handleJoinGroup.bind(this);\n    this.handleDeleteConversation = this.handleDeleteConversation.bind(this);\n    this.handleCloseConversation = this.handleCloseConversation.bind(this);\n  }\n  componentDidMount() {\n    if (ZIMKitManager.getInstance().isLoggedIn) {\n      ZIMKitConversationVM.getInstance().loadConversationList();\n    }\n    ZIMKitConversationVM.getInstance().registerIsLoggedInCallback(\n      () => {\n        ZIMKitConversationVM.getInstance().loadConversationList();\n      }\n    );\n    ZIMKitConversationVM.getInstance().registerCvTotalUnreadMessageCountUpdatedCallback(\n      data => {\n        this.setState({\n          totalUnreadMessageCount: data.totalUnreadMessageCount\n        });\n      }\n    );\n    ZIMKitConversationVM.getInstance().registerCvListUpdatedCallback(\n      conversationList => {\n        this.setState({ conversationList });\n      }\n    );\n    ZIMKitConversationVM.getInstance().registerCurrentCvUpdatedCallback(\n      currentConversation => {\n        this.setState({ currentConversation });\n      }\n    );\n    ZIMKitConversationVM.getInstance().registerAbnormalCallback(isAbnormal => {\n      this.setState({ isAbnormal });\n    });\n  }\n  componentWillUnmount(): void {\n    ZIMKitConversationVM.getInstance().unInit();\n  }\n  listScroll() {\n    const msgElement = document.querySelector(\n      '.conversation-content'\n    ) as HTMLDivElement;\n    const scrollTop = Math.round(msgElement.scrollTop);\n    const scrollHeight = msgElement.scrollHeight;\n    const clientHeight = msgElement.clientHeight;\n    if (scrollTop >= scrollHeight - clientHeight) {\n      ZIMKitConversationVM.getInstance().loadNextPage();\n    }\n    if (scrollTop == 0) {\n      // todo reload\n    }\n  }\n  triggerDialog(show: boolean) {\n    this.setState({ showCreateChatDialog: show });\n  }\n  handleRightClick(data: RightClickData) {\n    this.setState(data);\n  }\n  handleCloseDialog() {\n    this.triggerDialog(false);\n  }\n  handleCreatePeerChat(toUserID: string) {\n    const conversationItem = (this.state.conversationList as ZIMKitConversationModel[]).filter(\n      item => item.conversationID === toUserID\n    )[0];\n    if (conversationItem) {\n      ZIMKitConversationVM.getInstance().setCurrentConversation(\n        conversationItem.conversationID\n      );\n    } else {\n      ZIMKitConversationVM.getInstance().setTempConversation({\n        conversationID: toUserID,\n        conversationName: toUserID,\n        type: 0\n      } as ZIMKitConversationModel);\n    }\n    this.triggerDialog(false);\n  }\n  handleCreateGroupChat(groupName: string, userIDList: string) {\n    const userIDListArr = userIDList.split(';').filter(userID => userID);\n    ZIMKitGroupVM.getInstance()\n      .createGroup('', groupName, userIDListArr)\n      .then((data: ZIMGroupCreatedResult) => {\n        const { groupInfo, errorUserList } = data;\n        const { baseInfo } = groupInfo;\n        if (errorUserList.length) {\n          const errorUserIDList = errorUserList\n            .map(item => item.userID)\n            .join(' ');\n          dialogOperation(true, {\n            desc: `${i18n\n              .t('message_user_not_exit_please_again')\n              .replace('%s', errorUserIDList)}`,\n            cancelText: i18n.t('common_return'),\n            hasCloseBtn: false\n          });\n          return;\n        } else {\n          this.setState({ showCreateChatDialog: false });\n          ZIMKitConversationVM.getInstance().setTempConversation({\n            conversationID: baseInfo.groupID,\n            conversationName: baseInfo.groupName,\n            type: 2\n          } as ZIMKitConversationModel);\n        }\n      })\n      .catch(() => {\n        this.setState({ showCreateChatDialog: false });\n      });\n  }\n  handleJoinGroup(groupID: string) {\n    ZIMKitGroupVM.getInstance()\n      .joinGroup(groupID)\n      .then(data => {\n        const { groupInfo } = data;\n        const { baseInfo } = groupInfo;\n        this.setState({ showCreateChatDialog: false });\n        ZIMKitConversationVM.getInstance().setTempConversation({\n          conversationID: baseInfo.groupID,\n          conversationName: baseInfo.groupName,\n          type: 2\n        } as ZIMKitConversationModel);\n      })\n      .catch((error: ZIMError) => {\n        switch (error.code) {\n          case 6000523:\n            dialogOperation(true, {\n              desc: `${i18n\n                .t('group_group_id_not_exit')\n                .replace('%s', groupID)}`,\n              cancelText: i18n.t('common_return'),\n              hasCloseBtn: false\n            });\n            break;\n          default:\n            toastOperation(true, {\n              text: error.message,\n              type: 'default'\n            });\n            break;\n        }\n      });\n  }\n  handleDeleteConversation() {\n    // Delete conversation\n    const { conversationID, type } = this.state.conversationItem;\n    ZIMKitConversationVM.getInstance()\n      .deleteConversation(conversationID, type)\n      .then(() => {})\n      .finally(() => {\n        // Close right click dialog\n        this.setState({\n          showRightClickDialog: false\n        });\n      });\n  }\n  handleCloseConversation() {\n    this.setState({\n      showRightClickDialog: false\n    });\n  }\n  logout() {\n    ZIMKitManager.getInstance().logout();\n  }\n  render() {\n    let totalView: any = null,\n      createChatDialogView: any = null,\n      rightClickDialogView: any = null;\n    let conversationListView = null;\n    if (this.state.totalUnreadMessageCount) {\n      totalView = (\n        <div className=\"total\">\n          {this.state.totalUnreadMessageCount > 99\n            ? '99+'\n            : this.state.totalUnreadMessageCount}\n        </div>\n      );\n    }\n    if (this.state.showCreateChatDialog) {\n      createChatDialogView = (\n        <CreateChatDialog\n          onCloseDialog={this.handleCloseDialog}\n          onCreatePeerChat={this.handleCreatePeerChat}\n          onCreateGroupChat={this.handleCreateGroupChat}\n          onJoinGroup={this.handleJoinGroup}\n        />\n      );\n    }\n    if (this.state.showRightClickDialog) {\n      rightClickDialogView = (\n        <RightClickDialog\n          x={this.state.x}\n          y={this.state.y}\n          onDeleteConversation={this.handleDeleteConversation}\n          onCloseConversation={this.handleCloseConversation}\n        />\n      );\n    }\n    if (this.state.conversationList && this.state.conversationList.length) {\n      conversationListView = this.state.conversationList.map(\n        (element: ZIMKitConversationModel, index: number) => (\n          <ConversationItem\n            key={element.conversationID + index}\n            conversation={element}\n            currentConversation={this.state.currentConversation}\n            onRightClick={this.handleRightClick}\n          />\n        )\n      );\n    }\n    return (\n      <div className=\"conversation\">\n        <div className=\"left-banner\">\n          <div className=\"top\">\n            <div className=\"item\">\n              <div className=\"icon message-icon\"></div>\n              <div className=\"text\">\n                {i18n.t('conversation_message_total_count')}\n              </div>\n              {totalView}\n            </div>\n            <div className=\"item\" onClick={this.triggerDialog.bind(this, true)}>\n              <div className=\"icon create-chat-icon\"></div>\n              <div className=\"text create-chat-text\">\n                {i18n.t('conversation_start_chat_w')}\n              </div>\n            </div>\n          </div>\n          <div className=\"item\" onClick={this.logout}>\n            <div className=\"icon exit-icon\"></div>\n            <div className=\"text exit-text\">{i18n.t('common_logout')}</div>\n          </div>\n        </div>\n        {!this.state.isAbnormal ? (\n          this.state.conversationList.length ? (\n            <div className=\"conversation-content\" onScroll={this.listScroll}>\n              {conversationListView}\n            </div>\n          ) : (\n            <div className=\"default-content\">\n              <div className=\"text\">{i18n.t('conversation_empty')}</div>\n            </div>\n          )\n        ) : (\n          <div className=\"abnormal-content\">\n            <div\n              className=\"btn reload-btn\"\n              onClick={ZIMKitConversationVM.getInstance().loadConversationList.bind(\n                ZIMKitConversationVM.getInstance()\n              )}>\n              {i18n.t('conversation_reload')}\n            </div>\n          </div>\n        )}\n        {createChatDialogView}\n        {rightClickDialogView}\n      </div>\n    );\n  }\n}\n\nexport default ConversationList;\n","import { EventName } from \"../../ZIMKitCommon/Constant/event\";\nimport ZIMKitEventHandler from \"../../ZIMKitCommon/VM/ZIMKitEventHandler\";\nimport ZIMKitManager from \"../../ZIMKitCommon/VM/ZIMKitManager\";\nimport ZIMKitMessageModel from \"../Model\";\nimport ZIMKiti18n from \"../../../plugin/i18n\";\nconst i18n = ZIMKiti18n.getInstance().getI18next();\nexport default class ZIMKitMessageVM {\n    constructor() {\n        this.eventHandler = ZIMKitEventHandler.getInstance();\n        this.messageCount = 30;\n        this.messageIndex = 31;\n        this.currentChat = {};\n        this.currentMessageList = [];\n        if (!ZIMKitMessageVM.instance) {\n            ZIMKitMessageVM.instance = this;\n            ZIMKitMessageVM.instance.initListenerHandle();\n        }\n        return ZIMKitMessageVM.instance;\n    }\n    static getInstance() {\n        if (!ZIMKitMessageVM.instance) {\n            ZIMKitMessageVM.instance = new ZIMKitMessageVM();\n        }\n        return ZIMKitMessageVM.instance;\n    }\n    initListenerHandle() {\n        this.eventHandler.addEventListener(EventName.zimReceivePeerMessage, [\n            (data) => {\n                if (this.currentChat.conversationID === data.fromConversationID) {\n                    data.messageList.forEach((item) => {\n                        this.currentMessageList.push(new ZIMKitMessageModel(item));\n                    });\n                    this.eventHandler.actionListener(EventName.zimKitCurrentMessageListUpdated, this.currentMessageList);\n                    this.eventHandler.actionListener(EventName.zimKitCurrentChatUpdated, this.currentChat);\n                }\n            },\n        ]);\n        this.eventHandler.addEventListener(EventName.zimReceiveGroupMessage, [\n            (data) => {\n                if (this.currentChat.conversationID === data.fromConversationID) {\n                    data.messageList.forEach((item) => {\n                        this.currentMessageList.push(new ZIMKitMessageModel(item));\n                    });\n                    this.eventHandler.actionListener(EventName.zimKitCurrentMessageListUpdated, this.currentMessageList);\n                    this.eventHandler.actionListener(EventName.zimKitCurrentChatUpdated, this.currentChat);\n                }\n            },\n        ]);\n        this.eventHandler.addEventListener(EventName.zimKitDeleteConversation, [\n            (conversationID) => {\n                if (conversationID === this.currentChat.conversationID) {\n                    this.currentMessageList = [];\n                    this.currentChat = {};\n                    this.eventHandler.actionListener(EventName.zimKitCurrentMessageListUpdated, this.currentMessageList);\n                    this.eventHandler.actionListener(EventName.zimKitCurrentChatUpdated, this.currentChat);\n                }\n            },\n        ]);\n        this.eventHandler.addEventListener(EventName.zimKitCurrentConversationUpdate, [\n            (conversation) => {\n                if (!conversation ||\n                    (this.currentChat.conversationID &&\n                        conversation.conversationID === this.currentChat.conversationID))\n                    return;\n                this.currentChat = conversation;\n                this.messageCount = 30;\n                this.currentMessageList.length = 0;\n                this.queryHistoryMessage(this.currentChat.conversationID, this.currentChat.type);\n                this.eventHandler.actionListener(EventName.zimKitCurrentChatUpdated, this.currentChat);\n            },\n        ]);\n    }\n    queryHistoryMessage(conversationID, conversationType) {\n        const config = {\n            nextMessage: undefined,\n            count: this.messageCount,\n            reverse: true,\n        };\n        return ZIMKitManager.getInstance()\n            .zim.queryHistoryMessage(conversationID, conversationType, config)\n            .then((data) => {\n            this.currentMessageList = [];\n            if (data.messageList.length) {\n                data.messageList.forEach((item) => {\n                    this.currentMessageList.push(new ZIMKitMessageModel(item));\n                });\n            }\n            this.eventHandler.actionListener(EventName.zimKitCurrentMessageListUpdated, this.currentMessageList);\n        });\n    }\n    clearCurrentMessageList() {\n        this.currentMessageList = [];\n        this.eventHandler.actionListener(EventName.zimKitCurrentMessageListUpdated, this.currentMessageList);\n    }\n    sendPeerMessage(message) {\n        const config = { priority: 1 };\n        return ZIMKitManager.getInstance()\n            .zim.sendPeerMessage(message, this.currentChat.conversationID, config)\n            .then((res) => {\n            this.currentMessageList.push(new ZIMKitMessageModel(res.message));\n        })\n            .catch((error) => {\n            const msg = {\n                type: 1,\n                messageID: String(new Date().getTime()),\n                message: message.message,\n                timestamp: new Date().getTime(),\n                senderUserID: ZIMKitManager.getInstance().userInfo.userID,\n                conversationID: \"\",\n                conversationType: 0,\n                direction: 0,\n                sentStatus: 2,\n                orderKey: 0,\n                conversationSeq: 0,\n            };\n            this.currentMessageList.push(new ZIMKitMessageModel(msg));\n            switch (error.code) {\n                case 6000204:\n                    const tipMsg = {\n                        type: 99,\n                        messageID: String(new Date().getTime()),\n                        message: `${i18n\n                            .t(\"message_user_not_exit_please_again\")\n                            .replace(\"%s\", this.currentChat.conversationID)}`,\n                        timestamp: new Date().getTime(),\n                        senderUserID: ZIMKitManager.getInstance().userInfo.userID,\n                        conversationID: \"\",\n                        conversationType: 0,\n                        direction: 0,\n                        sentStatus: 2,\n                        orderKey: 0,\n                        conversationSeq: 0,\n                    };\n                    this.currentMessageList.push(new ZIMKitMessageModel(tipMsg));\n                    break;\n                default:\n                    break;\n            }\n        })\n            .finally(() => {\n            this.eventHandler.actionListener(EventName.zimKitCurrentChatUpdated, this.currentChat);\n            this.eventHandler.actionListener(EventName.zimKitCurrentMessageListUpdated, this.currentMessageList);\n        });\n    }\n    sendGroupMessage(message) {\n        const config = { priority: 1 };\n        return ZIMKitManager.getInstance()\n            .zim.sendGroupMessage(message, this.currentChat.conversationID, config)\n            .then((res) => {\n            this.currentMessageList.push(new ZIMKitMessageModel(res.message));\n        })\n            .catch(() => {\n            const msg = {\n                type: 1,\n                messageID: String(new Date().getTime()),\n                message: message.message,\n                timestamp: new Date().getTime(),\n                senderUserID: ZIMKitManager.getInstance().userInfo.userID,\n                conversationID: \"\",\n                conversationType: 0,\n                direction: 0,\n                sentStatus: 2,\n                orderKey: 0,\n                conversationSeq: 0,\n            };\n            this.currentMessageList.push(new ZIMKitMessageModel(msg));\n        })\n            .finally(() => {\n            this.eventHandler.actionListener(EventName.zimKitCurrentChatUpdated, this.currentChat);\n            this.eventHandler.actionListener(EventName.zimKitCurrentMessageListUpdated, this.currentMessageList);\n        });\n    }\n    unInit() {\n        this.currentChat = {};\n        this.currentMessageList.length = 0;\n    }\n    registerLoginUserUpdatedCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimKitLoginUserUpdate, [\n            callback,\n        ]);\n    }\n    registerCurrentChatUpdatedCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimKitCurrentChatUpdated, [\n            callback,\n        ]);\n    }\n    registerMessageListUpdatedCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimKitCurrentMessageListUpdated, [callback]);\n    }\n}\n","import React, { FormEvent } from \"react\";\nimport ZIMKitMessageVM from \"../VM/ZIMKitMessageVM\";\nimport { dateFormat } from \"../../ZIMKitCommon/ToolUtil/dateFormat\";\nimport ZIMKitMessageModel from \"../Model\";\nimport ZIMKitGroupVM from \"../../ZIMKitGroup/VM/ZIMKitGroupVM\";\nimport { ZIMMessage } from \"../../ZIMAdapter/index.entity\";\nimport \"../../ZIMKitCommon/UI/common.css\"\nimport \"./style.css\"\nimport { groupInfoOperation } from \"../../ZIMKitCommon/ToolUtil/eventBus\";\nimport ZIMKiti18n from '../../../plugin/i18n';\nimport ZIMKitManager from \"../../ZIMKitCommon/VM/ZIMKitManager\";\nconst i18n = ZIMKiti18n.getInstance().getI18next() as any;\n\nclass MessageView extends React.Component<any, any> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            currentChat: null,\n            currentMessageList: [],\n            message: \"\",\n            oldScrollHeight: 0,\n            newScrollHeight: 0,\n            userInfo: {}\n        }\n        this.listScroll = this.listScroll.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n        this.dateFormat = this.dateFormat.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.getGroupUserName = this.getGroupUserName.bind(this);\n        this.scrollToBottom = this.scrollToBottom.bind(this);\n        this.triggerGroupInfo = this.triggerGroupInfo.bind(this);\n    }\n    componentDidMount() {\n        ZIMKitMessageVM.getInstance().registerLoginUserUpdatedCallback(userInfo => {\n            this.setState({ userInfo });\n        })\n        ZIMKitMessageVM.getInstance().registerCurrentChatUpdatedCallback(currentChat => {\n            this.setState({ currentChat, message: \"\" }, () => {\n                // Auto focus\n                const messageInput = document.querySelector('.text-area');\n                // @ts-ignore\n                messageInput && (messageInput.focus());\n            });\n        });\n        ZIMKitMessageVM.getInstance().registerMessageListUpdatedCallback(currentMessageList => {\n            this.setState({ currentMessageList }, () => {\n                this.scrollToBottom();\n            });\n        });\n    }\n    componentWillUnmount(): void {\n        ZIMKitMessageVM.getInstance().unInit();\n    }\n    scrollToBottom() {\n        const msgElement = document.querySelector(\".message-content\") as HTMLDivElement;\n        if (msgElement) {\n            const scrollTop = Number(msgElement.scrollHeight) - Number(msgElement.clientHeight);\n            msgElement.scrollTop = scrollTop;\n        }\n    }\n    listScroll() {\n        const msgElement = document.querySelector(\".message-content\") as HTMLDivElement;\n        if (msgElement) {\n            const scrollTop = Math.round(msgElement.scrollTop);\n            const scrollHeight = msgElement.scrollHeight;\n            const { currentMessageList, currentChat } = this.state;\n            if (scrollTop == 0) {\n                if (ZIMKitMessageVM.getInstance().messageCount <= currentMessageList.length) {\n                    ZIMKitMessageVM.getInstance().messageCount = currentMessageList.length + 30;\n                    ZIMKitMessageVM.getInstance().queryHistoryMessage(currentChat.conversationID, currentChat.type).then(() => {\n                        this.setState({\n                            oldScrollHeight: scrollHeight,\n                        }, () => {\n                            this.setState({\n                                newScrollHeight: msgElement.scrollHeight,\n                            }, () => {\n                                msgElement.scrollTop = this.state.newScrollHeight - this.state.oldScrollHeight;\n                            });\n                        });\n                    })\n                }\n            }\n        }\n    }\n    sendMessage() {\n        const messageObj = {\n            type: 1,\n            message: this.state.message,\n        } as ZIMMessage;\n        if (this.state.currentChat.type === 2) {\n            ZIMKitMessageVM.getInstance().sendGroupMessage(messageObj);\n        } else {\n            ZIMKitMessageVM.getInstance().sendPeerMessage(messageObj);\n        }\n        this.setState({ message: \"\" });\n    }\n    getGroupUserName(userID: string) {\n        const memberList = ZIMKitGroupVM.getInstance().memberList;\n        let groupIDUserName = userID;\n        if (memberList.length) {\n            const member = memberList.filter((item) => item.userID === userID)[0];\n            groupIDUserName =  member ? member.userName : userID;\n        }\n        return groupIDUserName;\n    }\n    dateFormat(currentMessage: ZIMKitMessageModel, currentIndex: number) {\n        if (currentIndex === 0) {\n            return dateFormat(currentMessage.timestamp, true);\n        } else {\n            const previousMessage = this.state.currentMessageList[currentIndex - 1];\n            if (previousMessage && currentMessage.timestamp - previousMessage.timestamp > 300000) {\n                return dateFormat(currentMessage.timestamp, true);\n            }\n        }\n    }\n    handleInputChange(event: FormEvent) {\n        this.setState({\n            message: (event.target as HTMLTextAreaElement).value\n        });\n    }\n    triggerGroupInfo() {\n        groupInfoOperation(true);\n    }\n    render() {\n        const { currentChat, currentMessageList } = this.state;\n        const { userID, userName } = ZIMKitManager.getInstance().userInfo;\n        let chatContentView: any = null;\n        if (!currentChat || !currentChat.conversationID) {\n            chatContentView = (<div className=\"default-content\">\n                <div className=\"img\"></div>\n                <div className=\"text\">{ i18n.t(\"message_empty_w\") }</div>\n            </div>);\n        } else {\n            const { conversationName, conversationID, type } = currentChat;\n            chatContentView = (\n                <React.Fragment>\n                    <div className=\"header\">\n                        <div className=\"title\">{ conversationName || conversationID }</div>\n                        { type === 2 ? <div className=\"more-icon\" onClick={ this.triggerGroupInfo }></div> : null }\n                    </div>\n                    <div className=\"message-content\" onScroll={ this.listScroll }>\n                        {\n                            (currentMessageList as ZIMKitMessageModel[]).map((item, index) => {\n                                const time = this.dateFormat(item, index);\n                                const isReceive = item.conversationType === 2 ? item.senderUserID !== userID : item.senderUserID !== userID;\n                                const isError = item.type === 99;\n                                const groupUserName = this.getGroupUserName(item.senderUserID);\n                                return <div className=\"message-item\" key={ item.messageID + index }>\n                                    {\n                                        time ? <div className=\"time-box\">{ time }</div> : null\n                                    }\n                                    {\n                                        isReceive ? <div className=\"left-msg\">\n                                            <div className=\"head-portrait\">\n                                                { item.conversationType === 2 ? groupUserName.substr(0, 1).toLowerCase() : (conversationName ? conversationName.substr(0, 1).toLowerCase() : \"\") }\n                                            </div>\n                                            <div className=\"message-box\">\n                                                { item.conversationType === 2 ? <div className=\"send-name\">{ groupUserName }</div> : null }\n                                                <div className=\"msg-text\">{ item.message }</div>\n                                            </div>\n                                        </div> : null\n                                    }\n                                    {\n                                        isError ? <div className=\"center-msg\">{ item.message }</div> : null\n                                    }\n                                    {\n                                        !isReceive && !isError ? <div className=\"right-msg\">\n                                            { item.type !== 99 && item.sentStatus === 2 ? <div className=\"err-icon\"></div> : null }\n                                            <div className=\"message-box\">\n                                                {/* { item.conversationType === 2 ? <div className=\"send-name\">{ userName }</div> : null } */}\n                                                <div className=\"msg-text\">{ item.message }</div>\n                                            </div>\n                                            <div className=\"head-portrait\">{ userName.substr(0, 1).toLowerCase() }</div>\n                                        </div> : null\n                                    }\n                                </div>\n                            })\n                        }\n                    </div>\n                    <div className=\"send-box\">\n                        <div className=\"tool-box\"></div>\n                        <textarea className=\"text-area\" value={this.state.message} onInput={ this.handleInputChange }></textarea>\n                        <button className=\"btn send-button\" onClick={ this.sendMessage } disabled={ !this.state.message }>{ i18n.t(\"message_send_w\") }</button>\n                    </div>\n                </React.Fragment>\n            );\n        }\n        return (<div className=\"chat\">{ chatContentView }</div>);\n    }\n}\n\nexport default MessageView;","import React from \"react\";\nimport { groupInfoOperation, toastOperation } from \"../../ZIMKitCommon/ToolUtil/eventBus\";\nimport ZIMKitGroupVM from \"../VM/ZIMKitGroupVM\";\nimport \"./style.css\";\nimport ZIMKiti18n from '../../../plugin/i18n';\nconst i18n = ZIMKiti18n.getInstance().getI18next() as any;\n\nclass GroupInfoView extends React.Component<any, any> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            currentGroupInfo: null\n        };\n        this.copy = this.copy.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick(event: MouseEvent) {\n        if ((event.target as HTMLElement).className.includes(\"more-icon\")) return;\n        let flag = false;\n        try {\n            ((event as any).path as HTMLElement[]).forEach(path => {\n                if (path.className && path.className.includes(\"group-container\")) {\n                    flag = true;\n                    throw new Error(\"break\");\n                }\n            })\n        } catch (error) { }\n        if (!flag) {\n            groupInfoOperation(false);\n        }\n    }\n    componentDidMount(): void {\n        window.addEventListener(\"click\", this.handleClick);\n        ZIMKitGroupVM.getInstance().registerCurrentGroupInfoUpdateCallback(currentGroupInfo => {\n            this.setState({ currentGroupInfo });\n        });\n    }\n    componentWillUnmount(): void {\n        window.removeEventListener(\"click\", this.handleClick)\n        ZIMKitGroupVM.getInstance().unInit();\n    }\n    copy() {\n        const currentGroupInfo = this.state.currentGroupInfo;\n        navigator.clipboard && currentGroupInfo && navigator.clipboard.writeText(currentGroupInfo.baseInfo.groupID).then(() => {\n            toastOperation(true, {\n                text: i18n.t(\"group_copy_success\"),\n                type: \"default\",\n            });\n        });\n    }\n    render() {\n        const currentGroupInfo = this.state.currentGroupInfo;\n        let groupInfoView = null;\n        if (this.props.showGroupInfo) {\n            // @ts-ignore\n            groupInfoView = <div className=\"group-container\">\n                <div className=\"form-box\">\n                    <div className=\"id\">\n                        <div className=\"label\">{ i18n.t(\"group_group_id\") }</div>\n                        <div className=\"value\">{ currentGroupInfo ? currentGroupInfo.baseInfo.groupID : \"\" }</div>\n                    </div>\n                    <div className=\"btn copy-btn\" onClick={ this.copy }>{ i18n.t(\"group_copy\") }</div>\n                </div>\n            </div>\n        }\n        return groupInfoView;\n    }\n}\n\nexport default GroupInfoView;","import React from 'react';\nimport './style.css';\nimport eventBus, { EmitName } from \"../../../ToolUtil/eventBus\";\n\nclass Toast extends React.Component<any, any> {\n    toastTimer: any;\n    duration = 2000;\n    constructor(props: any) {\n        super(props);\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        if (this.props.showToast) {\n            clearTimeout(this.toastTimer);\n            this.toastTimer = setTimeout(() => {\n                eventBus.emit(EmitName.ToastOperation, false);\n            }, this.duration);\n        }\n    }\n    componentWillUnmount(): void {\n        clearTimeout(this.toastTimer);\n        this.toastTimer = null;\n    }\n    render() {\n        let toastView = null;\n        if (this.props.showToast) {\n            const { name, text, type } = this.props.toastData;\n            // @ts-ignore\n            toastView = <div>\n                <div className={ \"default\" + (type === \"loading\" ? \" loading\" : \"\") }>\n                    <div className={ \"toast\" + (type === \"error\" ? \" error\" : \"\" )}>\n                        { name ? <span className=\"name\">{ name }</span> : null}\n                        <span className=\"text\">{ text }</span>\n                    </div>\n                </div>\n            </div>\n        }\n        return toastView;\n    }\n}\n\nexport default Toast;","import React from 'react';\nimport './style.css';\nimport eventBus, { EmitName } from \"../../../ToolUtil/eventBus\";\n\nclass BaseDialog extends React.Component<any, any> {\n    constructor(props: any) {\n        super(props);\n        this.closeHandle = this.closeHandle.bind(this);\n        this.cancelHandle = this.cancelHandle.bind(this);\n        this.confirmHandle = this.confirmHandle.bind(this);\n    }\n    closeHandle() {\n        eventBus.emit(EmitName.DialogOperation, false);\n    }\n    cancelHandle() {\n        const { cancelFunc } = this.props.dialogData;\n        cancelFunc && cancelFunc();\n        this.closeHandle();\n    }\n    confirmHandle() {\n        const { confirmFunc } = this.props.dialogData;\n        confirmFunc && confirmFunc();\n        this.closeHandle();\n    }\n    render() {\n        let dialogView = null;\n        if (this.props.showBaseDialog) {\n            const { title, desc, hasCloseBtn, cancelText, confirmText } = this.props.dialogData;\n            dialogView = <div className=\"wrapper\">\n                <div className=\"dialog\">\n                    {\n                        hasCloseBtn ? <div className=\"close-icon\" onClick={ this.closeHandle }></div> : null\n                    }\n                    <div className=\"title\">{ title }</div>\n                    <div className=\"desc\">{ desc }</div>\n                    <div className=\"line\"></div>\n                    <div className=\"btn-box\">\n                        {\n                            cancelText ? <button className=\"btn cancel\" onClick={ this.cancelHandle }>{ cancelText }</button> : null\n                        }\n                        {\n                            confirmText ? <button className=\"btn confirm\" onClick={ this.confirmHandle }>{ confirmText }</button> : null\n                        }\n                    </div>\n                </div>\n            </div>\n        }\n        return dialogView;\n    }\n}\n\nexport default BaseDialog;","import React from \"react\";\nimport ConversationList from \"../../ZIMKitConversation/UI\";\nimport MessageView from \"../../ZIMKitMessage/UI\";\nimport GroupInfoView from \"../../ZIMKitGroup/UI\";\nimport Toast from \"../../ZIMKitCommon/UI/components/Toast\";\nimport BaseDialog from \"../../ZIMKitCommon/UI/components/BaseDialog\";\nimport eventBus, { EmitName } from \"../../ZIMKitCommon/ToolUtil/eventBus\";\nimport './style.css';\n\nclass Common extends React.Component<any, any> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            showGroupInfo: false,\n            showToast: false,\n            showBaseDialog: false,\n            toastData: {\n                text: \"\",\n                name: \"\",\n                type: \"default\"\n            },\n            dialogData: {\n                title: \"\",\n                desc: \"\",\n                cancelText: \"\",\n                confirmText: \"\",\n                hasCloseBtn: false\n            }\n        };\n        this.handleGroupInfoOperation = this.handleGroupInfoOperation.bind(this);\n        this.handleToastOperation = this.handleToastOperation.bind(this);\n        this.handleDialogOperation = this.handleDialogOperation.bind(this);\n    }\n    handleGroupInfoOperation(showGroupInfo: boolean) {\n        this.setState({ \n            showGroupInfo: showGroupInfo === undefined ? !this.state.showGroupInfo : !!showGroupInfo\n        });\n    }\n    handleToastOperation(showToast: boolean, toastData: any) {\n        this.setState({ showToast, toastData });\n    }\n    handleDialogOperation(showBaseDialog: boolean, dialogData: any) {\n        this.setState({ showBaseDialog, dialogData });\n    }\n    componentDidMount(): void {\n        eventBus.on(EmitName.GroupInfoOperation, this.handleGroupInfoOperation);\n        eventBus.on(EmitName.ToastOperation, this.handleToastOperation);\n        eventBus.on(EmitName.DialogOperation, this.handleDialogOperation);\n    }\n    componentWillUnmount(): void {\n        eventBus.off(EmitName.GroupInfoOperation, this.handleGroupInfoOperation);\n        eventBus.off(EmitName.ToastOperation, this.handleToastOperation);\n        eventBus.off(EmitName.DialogOperation, this.handleDialogOperation);\n    }\n    render() {\n        const { showGroupInfo, showToast, showBaseDialog, toastData, dialogData } = this.state;\n        return (<div id=\"zegoim\">\n            <div className=\"zego-im-container\">\n                <div className=\"top-banner\">ZEGO IM</div>\n                <div className=\"box\">\n                    <ConversationList></ConversationList>\n                    <MessageView></MessageView>\n                    <GroupInfoView showGroupInfo={ showGroupInfo }></GroupInfoView>\n                </div>\n                <Toast showToast={ showToast } toastData={ toastData }></Toast>\n                <BaseDialog showBaseDialog={ showBaseDialog } dialogData={ dialogData }></BaseDialog>\n            </div>\n        </div>)\n    }\n}\n\nexport default Common;\n","import React from 'react';\nimport Common  from \"../../ZIMKit/src/components/ZIMKitCommon/UI\";\nimport { connect } from \"react-redux\";\nimport { logout, selectIsLoggedIn } from \"../../store/authSlice\";\nimport { Navigate } from 'react-router-dom';\nimport ZIMKitManager from '../../ZIMKit/src/components/ZIMKitCommon/VM/ZIMKitManager';\nimport { ZIMEventOfConnectionStateChangedResult } from '../../ZIMKit/src/components/ZIMAdapter/index.entity';\nimport { clearCacheUserInfo } from '../../util';\n\nclass MainPage extends React.Component<any, any> {\n    componentDidMount(){\n        ZIMKitManager.getInstance().registerConnectionStateChangedCallback((data: ZIMEventOfConnectionStateChangedResult) => {\n            if (data.state === 0 && (data.event === 0 || data.event === 4)) {\n                this.props.logout();\n                clearCacheUserInfo();\n            }\n        });\n    }\n    render() {\n        return (<div id=\"main\">\n            {\n                !this.props.isLoggedIn && (<Navigate to='/login' replace={ true } />)\n            }\n            <Common></Common> \n        </div>);\n    }\n}\n\nconst mapDispatchToProps = (dispatch: (arg0: { payload: any; type: string; }) => any) => {\n    return {\n        logout: (content: any) => dispatch(logout(content))\n    };\n};\n  \nexport default connect(selectIsLoggedIn, mapDispatchToProps)(MainPage);","import React from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport LoginPage from \"../Login/index\";\nimport MainPage from \"../Main/index\";\nimport { initIMKitSDK, login, selectIsLoggedIn } from \"../../store/authSlice\";\nimport appConfig from \"../../config\";\nimport ZIMKitManager from \"../../ZIMKit/src/components/ZIMKitCommon/VM/ZIMKitManager\";\nimport { getCacheUserInfo } from '../../util/index';\nimport { getToken } from '../../util/token';\nimport { ZIMUserInfo } from \"../../ZIMKit/src/components/ZIMAdapter/index.entity\";\nclass App extends React.Component<any, any> {\n    cacheUserInfo = getCacheUserInfo()\n    componentDidMount() {\n        // Init IMKitSDK\n        const zimKit = new ZIMKitManager();\n        zimKit.createZIM(appConfig.appID).then(() => {\n            this.props.initIMKitSDK(true);\n            if (this.cacheUserInfo) {\n                // Auto login\n                getToken(this.cacheUserInfo.userID, appConfig).then(token => {\n                    ZIMKitManager.getInstance().loginWithUserInfo(this.cacheUserInfo as ZIMUserInfo, token).then(() => {\n                        this.props.login();\n                    });\n                });\n            }\n        });\n    }\n    render() {\n        return (\n            <Routes>\n                <Route path=\"/\" element={ <MainPage /> } />\n                <Route path=\"/main\" element={ <MainPage /> } />\n                <Route path=\"/login\" element={ <LoginPage /> } />\n            </Routes>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch: (arg0: { payload: any; type: string; }) => any) => {\n    return {\n        initIMKitSDK: (content: any) => dispatch(initIMKitSDK(content)),\n        login: (content: any) => dispatch(login(content))\n    };\n};\n\nexport default connect(selectIsLoggedIn, mapDispatchToProps)(App);\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport  { store }  from \"./store\";\nimport './index.css';\nimport App from './pages/App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export var ZIMPlatform;\n(function (ZIMPlatform) {\n    ZIMPlatform[ZIMPlatform[\"Web\"] = 0] = \"Web\";\n})(ZIMPlatform || (ZIMPlatform = {}));\nexport { ZIM, ZIMMessageType, ZIMMessageDirection, ZIMMessageSentStatus, ZIMConversationNotificationStatus, ZIMConversationType, ZIMConnectionState } from 'zego-zim-web';\n"],"sourceRoot":""}