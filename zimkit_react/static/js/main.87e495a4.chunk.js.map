{"version":3,"sources":["store/authSlice.js","store/index.js","util/name.js","util/index.js","util/token.js","config.js","ZIMKit/src/components/ZIMKitCommon/Constant/event.js","ZIMKit/src/components/ZIMAdapter/platform.js","ZIMKit/src/components/ZIMAdapter/index.js","ZIMKit/src/components/ZIMKitCommon/VM/ZIMKitEventHandler.js","ZIMKit/src/locales/zh.js","ZIMKit/src/locales/en.js","ZIMKit/src/plugin/i18n/index.js","ZIMKit/src/components/ZIMKitCommon/VM/ZIMKitManager.js","pages/Login/index.tsx","ZIMKit/src/components/ZIMKitConversation/Model/index.js","ZIMKit/src/components/ZIMKitConversation/VM/ZIMKitConversation.js","ZIMKit/src/components/ZIMKitGroup/VM/ZIMKitGroupVM.js","ZIMKit/src/components/ZIMKitCommon/UI/components/CreateChatDialog/index.tsx","ZIMKit/src/components/ZIMKitCommon/UI/components/RightClickDialog/index.tsx","ZIMKit/src/components/ZIMKitCommon/ToolUtil/dateFormat.js","ZIMKit/src/components/ZIMKitCommon/ToolUtil/eventBus.js","ZIMKit/src/components/ZIMKitMessage/Model/index.js","ZIMKit/src/components/ZIMKitConversation/UI/index.tsx","ZIMKit/src/components/ZIMKitMessage/VM/ZIMKitMessageVM.js","ZIMKit/src/components/ZIMKitMessage/UI/index.tsx","ZIMKit/src/components/ZIMKitGroup/UI/index.tsx","ZIMKit/src/components/ZIMKitCommon/UI/components/Toast/index.tsx","ZIMKit/src/components/ZIMKitCommon/UI/components/BaseDialog/index.tsx","ZIMKit/src/components/ZIMKitCommon/UI/index.tsx","pages/Main/index.tsx","pages/App/index.tsx","reportWebVitals.js","index.tsx","ZIMKit/src/components/ZIMAdapter/index.entity.js"],"names":["authSlice","createSlice","name","initialState","isInit","isLoggedIn","reducers","initIMKitSDK","state","action","payload","login","logout","actions","selectIsLoggedIn","store","configureStore","reducer","useSelector","util_name","getCacheUserInfo","localStorage","userInfo","JSON","parse","getUserName","value","cacheUserList","userList","randomName","nameArr","Math","floor","random","length","result","userName","verify","some","item","userID","filter","generateToken","seconds","appConfig","console","log","time","Date","now","body","app_id","appID","user_id","nonce","ctime","expire","key","CryptoJS","enc","Utf8","serverSecret","iv","toString","substring","ciphertext","AES","encrypt","stringify","ciphert","Uint8Array","from","Array","atob","map","val","charCodeAt","len_ciphert","uint8","set","Int32Array","buffer","reverse","token","concat","btoa","String","fromCharCode","apply","Object","toConsumableArray","EventName","src_config","ZIMPlatformManage","platform","classCallCheck","this","process","PLATFORM","ZIMAdapter","createClass","type","listener","getInstance","on","off","destroy","renewToken","config","queryConversationList","groupInfo","userIDs","createGroup","message","toUserID","sendPeerMessage","toGroupID","sendGroupMessage","conversationID","conversationType","queryHistoryMessage","deleteConversation","clearConversationUnreadMessageCount","groupID","queryGroupInfo","queryGroupMemberList","joinGroup","leaveGroup","zimPlatformManage","ZIMPlatform","Web","__webpack_require__","e","then","bind","zimAdapter","zimModule","ZIMWeb","Promise","resolve","create","ZIMKitEventHandler","_this$eventList","eventList","defineProperty","zimError","zimConnectionStateChanged","zimTokenWillExpire","zimReceivePeerMessage","zimReceiveGroupMessage","zimConversationTotalUnreadMessageCountUpdated","zimConversationChanged","zimKitIsLoggedIn","zimKitLoginUserUpdate","zimKitDeleteConversation","zimKitConversationListUpdate","zimKitCurrentConversationUpdate","zimKitConversationListQueryAbnormally","zimKitCreateGroup","zimKitCurrentChatUpdated","zimKitCurrentMessageListUpdated","zimKitCurrentGroupInfoUpdated","instance","event","callBackList","_this","isArray","forEach","callBack","includes","push","li","splice","indexOf","_len","arguments","args","_key","func","zh","common_yesterday","common_user_kick_out","common_monday","common_tuesday","common_wednesday","common_thursday","common_friday","common_saturday","common_sunday","common_logout","common_return","conversation_start_chat_w","conversation_empty","conversation_start_single_chat","conversation_start_group_chat","conversation_join_group_chat","conversation_cancel","conversation_delete","conversation_message_total_count","conversation_reload","conversation_enter_touserid_w","conversation_close_chat_w","demo_login_hint","demo_login","demo_user_name","demo_user_name_w","demo_welcome","demo_input_user_id_error_tips","demo_input_placeholder_w","demo_user_id_login","group_create_chat","group_input_group_id","group_input_group_id_w","group_input_group_name","group_input_user_id_of_group","group_input_user_id_of_group_w","group_user_id_cant_null","group_create_group_chat_title","group_join_group_chat","group_user_not_exit","group_group_not_exit","group_group_user_id_not_exit","group_group_user_id_not_exit_w","group_group_id_not_exit","group_group_id_not_exit_w","group_input_user_id_error_tip","group_group_id","group_copy","group_copy_success","message_input_new_message","message_user_not_exit_please_again","message_user_not_exit_please_again_w_1","message_user_not_exit_please_again_w_2","message_cant_send_empty_msg","message_create_chat","message_input_user_id_error_tips","message_create_single_chat","message_send_w","message_empty_w","en","ZIMKiti18n","localesData","i18next","i18n","use","initReactI18next","options","resources","translation","fallbackLng","navigator","language","detection","caches","init","assign","cn","ZIMKitManager","eventHandler","initPlatform","zim","onEvent","window","manager","_this2","actionListener","offEvent","callback","addEventListener","_this3","errorInfo","data","getI18next","LoginPage","props","possibleConstructorReturn","getPrototypeOf","call","assertThisInitialized","loginFun","setState","objectSpread","target","loginWithUserInfo","setItem","setCacheUserInfo","find","addCacheUserToList","catch","error","react_default","a","createElement","id","react_router","to","replace","className","t","placeholder","onInput","style","display","onClick","disabled","React","Component","connect","dispatch","content","ZIMKitConversationModel","conversation","conversationName","unreadMessageCount","lastMessage","orderKey","notificationStatus","ZIMKitConversationVM","pagePullCount","conversationList","totalUnreadMessageCount","isAbnormal","activeCvID","loadStatus","initListenerHandle","updateListFlag","updateCurrentFlag","infoList","info","isExist","len","insetConversationList","sortCvListHandle","currentConversation","getConversationByID","nextConversation","undefined","count","reject","firstConversation","_this4","isAlsoDeleteServerConversation","index","insetConversation","sort","b","ZIMKitGroupVM","memberList","currentGroupInfo","baseInfo","groupName","userIDList","nextFlag","TabItem","changeNav","onNavChange","actived","text","TabList","tabList","element","handleNavChange","current","tabListView","CreateChatDialog_TabItem","TableContent","peerErrTip","peerDisabled","groupErrTip","groupDisabled","closeDialog","createPeerChat","createGroupChat","handleUserIDInputChange","handleGroupUserIDInputChange","handleGroupIDInputChange","handleGroupNameInputChange","onCloseDialog","onCreatePeerChat","onCreateGroupChat","onJoinGroup","arr","split","flag","tableContentView","errTipView","_this$state","currentActived","maxLength","CreateChatDialog","_this5","handleCloseDialog","handleJoinGroup","handleCreatePeerChat","handleCreateGroupChat","CreateChatDialog_TabList","CreateChatDialog_TableContent","RightClickDialog","closeConversation","handleClick","path","Error","removeEventListener","onDeleteConversation","onCloseConversation","top","y","left","x","dateFormat","date","newDate","today","toDateString","dayList","1","2","3","4","5","6","0","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","getSeconds","getTime","getDay","EmitName","eventEmit","EventEmitter","ZIMKitMessageType","groupInfoOperation","showGroupInfo","emit","GroupInfoOperation","toastOperation","showToast","toastData","ToastOperation","dialogOperation","showBaseDialog","dialogData","DialogOperation","ConversationItem","switchConversation","operationConversation","setCurrentConversation","preventDefault","con","document","querySelector","onRightClick","showRightClickDialog","clientX","offsetLeft","clientY","offsetTop","conversationItem","slice","toLowerCase","unreadCountView","onContextMenu","nameFormat","timestamp","sentStatus","ConversationList","showCreateChatDialog","listScroll","triggerDialog","handleRightClick","handleDeleteConversation","handleCloseConversation","loadConversationList","registerIsLoggedInCallback","registerCvTotalUnreadMessageCountUpdatedCallback","registerCvListUpdatedCallback","registerCurrentCvUpdatedCallback","registerAbnormalCallback","unInit","msgElement","scrollTop","round","scrollHeight","clientHeight","loadNextPage","show","setTempConversation","userIDListArr","errorUserList","errorUserIDList","join","desc","cancelText","hasCloseBtn","code","_this6","_this$state$conversat","finally","_this7","totalView","createChatDialogView","rightClickDialogView","conversationListView","components_CreateChatDialog","components_RightClickDialog","UI_ConversationItem","onScroll","ZIMKitMessageModel","messageID","senderUserID","direction","conversationSeq","ZIMKitMessageVM","messageCount","messageIndex","currentChat","currentMessageList","fromConversationID","messageList","nextMessage","priority","res","msg","tipMsg","MessageView","oldScrollHeight","newScrollHeight","sendMessage","handleInputChange","getGroupUserName","scrollToBottom","triggerGroupInfo","registerLoginUserUpdatedCallback","registerCurrentChatUpdatedCallback","messageInput","focus","registerMessageListUpdatedCallback","Number","messageObj","groupIDUserName","member","currentMessage","currentIndex","previousMessage","_this$state2","_ZIMKitManager$getIns","chatContentView","Fragment","isReceive","isError","groupUserName","substr","GroupInfoView","copy","registerCurrentGroupInfoUpdateCallback","clipboard","writeText","groupInfoView","Toast","toastTimer","duration","prevProps","prevState","snapshot","clearTimeout","setTimeout","eventBus","toastView","_this$props$toastData","BaseDialog","closeHandle","cancelHandle","confirmHandle","cancelFunc","confirmFunc","dialogView","_this$props$dialogDat","title","confirmText","Common","handleGroupInfoOperation","handleToastOperation","handleDialogOperation","UI","ZIMKitMessage_UI","ZIMKitGroup_UI","components_Toast","components_BaseDialog","MainPage","registerConnectionStateChangedCallback","removeItem","ZIMKitCommon_UI","App","cacheUserInfo","createZIM","Main","Login","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","es","react_router_dom","pages_App","d","__webpack_exports__","zego_zim_web__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"oLACaA,EAAYC,YAAY,CACjCC,KAAM,OACNC,aAAc,CACVC,QAAQ,EACRC,YAAY,GAEhBC,SAAU,CACNC,aAAc,SAACC,EAAOC,GAClBD,EAAMJ,OAASK,EAAOC,SAE1BC,MAAO,SAACH,EAAOC,GACXD,EAAMH,YAAa,GAEvBO,OAAQ,SAACJ,EAAOC,GACZD,EAAMH,YAAa,QAIgBL,EAAUa,QAA1CN,iBAAcI,UAAOC,WACvBE,EAAmB,SAACN,GAAD,MAAY,CACxCJ,OAAQI,EAAMJ,OACdC,WAAYG,EAAMH,aAEPL,IAAf,QCrBae,EAAQC,YAAe,CAAEC,QAASjB,OAEjBkB,kECLfC,EAAA,CACX,MACA,UACA,QACA,QACA,WACA,QACA,QACA,OACA,SACA,QACA,QACA,UACA,QACA,OACA,SACA,OACA,YACA,QACA,SACA,SACA,SACA,SACA,QACA,QACA,MACA,SACA,SACA,MACA,OACA,YACA,UACA,SACA,QACA,UACA,SACA,SACA,SACA,WACA,SACA,SACA,SACA,MACA,UACA,QACA,UACA,WACA,QACA,QACA,QACA,UACA,UACA,SACA,QACA,OACA,QACA,QACA,SACA,UACA,UACA,SACA,UACA,UACA,UACA,QACA,UACA,UACA,UACA,WACA,QACA,OACA,WACA,SACA,UACA,YACA,QACA,UACA,UACA,YACA,QACA,SACA,SACA,SACA,QACA,YACA,QACA,SACA,QACA,aACA,YACA,OACA,QACA,WACA,UACA,UACA,QACA,OACA,OACA,QACA,SACA,UACA,OACA,QACA,UACA,UACA,QACA,SACA,UACA,QACA,QACA,UACA,UACA,QACA,SACA,OACA,QACA,UACA,SACA,OACA,QACA,SACA,SACA,SACA,WACA,YACA,OACA,QACA,OACA,OACA,QACA,SACA,OACA,QACA,OACA,OACA,OACA,QACA,SACA,QACA,SACA,SACA,aACA,MACA,SACA,SACA,QACA,QACA,MACA,QACA,WACA,UACA,QACA,YACA,YACA,OACA,QACA,YACA,UACA,YACA,OACA,OACA,UACA,SACA,SACA,QACA,WACA,UACA,YACA,SACA,UACA,QACA,UACA,QACA,SACA,OACA,QACA,UACA,UACA,QACA,SACA,QACA,QACA,MACA,MACA,SACA,QACA,OACA,OACA,SACA,MACA,aACA,OACA,QACA,OACA,QACA,SACA,OACA,WACA,QACA,SACA,UACA,OACA,KACA,MACA,SACA,SACA,UACA,QACA,QACA,YACA,MACA,QACA,SACA,OACA,QACA,QACA,SACA,OACA,OACA,QACA,OACA,YACA,MACA,QACA,YACA,QACA,UACA,OACA,QACA,SACA,SACA,MACA,QACA,OACA,QACA,SACA,UACA,OACA,SACA,UACA,QACA,UACA,OACA,MACA,OACA,WACA,SACA,OACA,QACA,QACA,OACA,QACA,QACA,WACA,SACA,QACA,QACA,SACA,WACA,aACA,QACA,SACA,SACA,WACA,UACA,SACA,OACA,OACA,UACA,QACA,SACA,MACA,MACA,QACA,UACA,QACA,WACA,QACA,WACA,YACA,SACA,UACA,UACA,YACA,SACA,UACA,QACA,QACA,OACA,SACA,SACA,SACA,OACA,QACA,QACA,QACA,UACA,YACA,QACA,SACA,SACA,OACA,OACA,QACA,QACA,QACA,UACA,SACA,WACA,OACA,QACA,SACA,UACA,MACA,OACA,SACA,UACA,WACA,QACA,QACA,QACA,WACA,YACA,SACA,UACA,UACA,QACA,QACA,QACA,YACA,WACA,SACA,SACA,WACA,SACA,MACA,UACA,SACA,QACA,SACA,OACA,OACA,UACA,OACA,WACA,WACA,UACA,OACA,OACA,SACA,UACA,QACA,SACA,WACA,SACA,QACA,OACA,QACA,aACA,SACA,SACA,SACA,SACA,UACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,YACA,QACA,QACA,UACA,UACA,SACA,OACA,UACA,QACA,SACA,OACA,QACA,UACA,UACA,OACA,QACA,QACA,SACA,QACA,MACA,MACA,SACA,UACA,UACA,QACA,OACA,QACA,QACA,WACA,QACA,SACA,WACA,SACA,SACA,QACA,QACA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","file":"static/js/main.87e495a4.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nexport const authSlice = createSlice({\n    name: 'AUTH',\n    initialState: {\n        isInit: false,\n        isLoggedIn: false\n    },\n    reducers: {\n        initIMKitSDK: (state, action) => {\n            state.isInit = action.payload;\n        },\n        login: (state, action) => {\n            state.isLoggedIn = true;\n        },\n        logout: (state, action) => {\n            state.isLoggedIn = false;\n        }\n    }\n});\nexport const { initIMKitSDK, login, logout } = authSlice.actions;\nexport const selectIsLoggedIn = (state) => ({\n    isInit: state.isInit,\n    isLoggedIn: state.isLoggedIn\n});\nexport default authSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport authSlice from \"./authSlice\";\nexport const store = configureStore({ reducer: authSlice });\nexport const useAppDispatch = () => useDispatch();\nexport const useAppSelector = useSelector;\n","export default [\n    'Ada',\n    'Aaliyah',\n    'Aditi',\n    'Adela',\n    'Adelaide',\n    'Adele',\n    'Adora',\n    'Afra',\n    'Agatha',\n    'Agnes',\n    'Alani',\n    'Alberta',\n    'Alice',\n    'Alma',\n    'Althea',\n    'Alva',\n    'Alexandra',\n    'Alisa',\n    'Alison',\n    'Alyssa',\n    'Amanda',\n    'Amelia',\n    'Amity',\n    'Anila',\n    'Amy',\n    'Andrea',\n    'Angela',\n    'Ann',\n    'Anna',\n    'Annabelle',\n    'Antonia',\n    'Apphia',\n    'April',\n    'Arabela',\n    'Arlene',\n    'Ashley',\n    'Astrid',\n    'Atalanta',\n    'Athena',\n    'Audrey',\n    'Aurora',\n    'Ava',\n    'Barbara',\n    'Basia',\n    'Bblythe',\n    'Beatrice',\n    'Belen',\n    'Bella',\n    'Belle',\n    'Belinda',\n    'Bernice',\n    'Bertha',\n    'Beryl',\n    'Bess',\n    'Betsy',\n    'Betty',\n    'Beulah',\n    'Beverly',\n    'Blanche',\n    'Bonnie',\n    'Breenda',\n    'Brianna',\n    'Bridget',\n    'Brook',\n    'Calista',\n    'Camille',\n    'Candice',\n    'Candance',\n    'Carol',\n    'Cara',\n    'Caroline',\n    'Carlin',\n    'Caitlin',\n    'Catherine',\n    'Cathy',\n    'Cecilia',\n    'Celeste',\n    'Charlotte',\n    'Chaya',\n    'Cheryl',\n    'Cherry',\n    'Cheryl',\n    'Chloe',\n    'Christine',\n    'Clara',\n    'Claire',\n    'Clara',\n    'Clementine',\n    'Constance',\n    'Cora',\n    'Coral',\n    'Cornelia',\n    'Crystal',\n    'Cynthia',\n    'Daisy',\n    'Dale',\n    'Dana',\n    'Damla',\n    'Daphne',\n    'Darlene',\n    'Dawn',\n    'Debby',\n    'Deborah',\n    'Deirdre',\n    'Delia',\n    'Denise',\n    'Destiny',\n    'Diana',\n    'Dinah',\n    'Dolores',\n    'Dominic',\n    'Donna',\n    'Doreen',\n    'Dora',\n    'Doris',\n    'Dorothy',\n    'Eartha',\n    'Eden',\n    'Edith',\n    'Edwina',\n    'Eileen',\n    'Elaine',\n    'Eleanore',\n    'Elizabeth',\n    'Ella',\n    'Ellen',\n    'Elma',\n    'Elsa',\n    'Elsie',\n    'Elvira',\n    'Elva',\n    'Emily',\n    'Emma',\n    'Enid',\n    'Erin',\n    'Erica',\n    'Esther',\n    'Ethel',\n    'Eudora',\n    'Eunice',\n    'Evangeline',\n    'Eve',\n    'Evelyn',\n    'Faithe',\n    'Faith',\n    'Fanny',\n    'Fay',\n    'Flora',\n    'Florence',\n    'Frances',\n    'Freda',\n    'Frederica',\n    'Gabrielle',\n    'Gail',\n    'Gemma',\n    'Genevieve',\n    'Georgia',\n    'Geraldine',\n    'Gill',\n    'Gina',\n    'Giselle',\n    'Gladys',\n    'Gloria',\n    'Grace',\n    'Griselda',\n    'Gustave',\n    'Gwendolyn',\n    'Hannah',\n    'Harriet',\n    'Hazel',\n    'Heather',\n    'Hedda',\n    'Hedwig',\n    'Hedy',\n    'Helen',\n    'Heloise',\n    'Hermosa',\n    'Hilda',\n    'Hilary',\n    'Honey',\n    'Hulda',\n    'Ida',\n    'Ina',\n    'Ingrid',\n    'Irene',\n    'Iris',\n    'Irma',\n    'Isabel',\n    'Ivy',\n    'Jacqueline',\n    'Jade',\n    'Jamie',\n    'Jane',\n    'Janet',\n    'Janice',\n    'Jean',\n    'Jennifer',\n    'Jenny',\n    'Jessie',\n    'Jessica',\n    'Jill',\n    'Jo',\n    'Joa',\n    'Joanna',\n    'Joanne',\n    'Jocelyn',\n    'Jodie',\n    'Jolie',\n    'Josephine',\n    'Joy',\n    'Joyce',\n    'Judith',\n    'Judy',\n    'Julia',\n    'Julie',\n    'Juliet',\n    'June',\n    'Kama',\n    'Karen',\n    'Kate',\n    'Katherine',\n    'Kay',\n    'Kelly',\n    'Kimberley',\n    'Kitty',\n    'Kristin',\n    'Lara',\n    'Laura',\n    'Laurel',\n    'Lauren',\n    'Lee',\n    'Leila',\n    'Lena',\n    'Leona',\n    'Lesley',\n    'Letitia',\n    'Lila',\n    'Lilith',\n    'Lillian',\n    'Linda',\n    'Lindsay',\n    'Lisa',\n    'Liz',\n    'Lola',\n    'Lorraine',\n    'Louise',\n    'Lucy',\n    'Lyuba',\n    'Lydia',\n    'Lynn',\n    'Mabel',\n    'Madge',\n    'Madeline',\n    'Maggie',\n    'Mamie',\n    'Mandy',\n    'Marcia',\n    'Margaret',\n    'Marguerite',\n    'Maria',\n    'Marina',\n    'Marian',\n    'Marjorie',\n    'Martina',\n    'Martha',\n    'Mary',\n    'Maud',\n    'Maureen',\n    'Mavis',\n    'Maxine',\n    'Mag',\n    'May',\n    'Megan',\n    'Melissa',\n    'Meroy',\n    'Meredith',\n    'Merry',\n    'Michelle',\n    'Michaelia',\n    'Mignon',\n    'Mildred',\n    'Miranda',\n    'Mirabelle',\n    'Miriam',\n    'Modesty',\n    'Moira',\n    'Molly',\n    'Mona',\n    'Monica',\n    'Muriel',\n    'Murray',\n    'Myra',\n    'Myrna',\n    'Nancy',\n    'Naomi',\n    'Natalie',\n    'Natividad',\n    'Nelly',\n    'Nicole',\n    'Nicola',\n    'Nina',\n    'Nora',\n    'Norma',\n    'Novia',\n    'Nydia',\n    'Octavia',\n    'Odelia',\n    'Odelette',\n    'Olga',\n    'Olive',\n    'Olivia',\n    'Ophelia',\n    'Pag',\n    'Page',\n    'Pamela',\n    'Pandora',\n    'Patricia',\n    'Paula',\n    'Pearl',\n    'Penny',\n    'Penelope',\n    'Philipppa',\n    'Phoebe',\n    'Phoenix',\n    'Phyllis',\n    'Polly',\n    'Poppy',\n    'Prima',\n    'Priscilla',\n    'Prudence',\n    'Queena',\n    'Quanna',\n    'Quintina',\n    'Rachel',\n    'Rae',\n    'Rebecca',\n    'Regina',\n    'Renee',\n    'Renata',\n    'Rita',\n    'Riva',\n    'Roberta',\n    'Rose',\n    'Rosalind',\n    'Rosemary',\n    'Roxanne',\n    'Ruby',\n    'Ruth',\n    'Sabina',\n    'Sabrina',\n    'Sally',\n    'Salome',\n    'Samantha',\n    'Sandra',\n    'Sandy',\n    'Sara',\n    'Sarah',\n    'Sebastiane',\n    'Selena',\n    'Sharon',\n    'Sherry',\n    'Sheila',\n    'Shirley',\n    'Sibyl',\n    'Sigrid',\n    'Simona',\n    'Sophia',\n    'Spring',\n    'Stacey',\n    'Setlla',\n    'Stephanie',\n    'Susan',\n    'Susie',\n    'Susanna',\n    'Suzanne',\n    'Sylvia',\n    'Tara',\n    'Tabitha',\n    'Tammy',\n    'Teresa',\n    'Tess',\n    'Thera',\n    'Theresa',\n    'Tiffany',\n    'Tina',\n    'Tobey',\n    'Tracy',\n    'Trista',\n    'Truda',\n    'Ula',\n    'Una',\n    'Ursula',\n    'Valerie',\n    'Vanessa',\n    'Venus',\n    'Vera',\n    'Verna',\n    'Vicky',\n    'Victoria',\n    'Viola',\n    'Violet',\n    'Virginia',\n    'Vivien',\n    'Wallis',\n    'Wanda',\n    'Wendy',\n    'Winni',\n    'Winifred',\n    'Xanthe',\n    'Xaviera',\n    'Xenia',\n    'Xylia',\n    'Yedda',\n    'Yetta',\n    'Yuri',\n    'Yvette',\n    'Yvonne',\n    'Zara',\n    'Zenobia',\n    'Zoe',\n    'Zona',\n    'Zanna',\n    'Zora'\n];\n","import nameArr from './name';\nexport const getCacheUserInfo = () => {\n    return localStorage.userInfo\n        ? JSON.parse(localStorage.userInfo)\n        : null;\n};\nexport const setCacheUserInfo = (userInfo) => {\n    localStorage.setItem('userInfo', JSON.stringify(userInfo));\n};\nexport const clearCacheUserInfo = () => {\n    localStorage.removeItem('userInfo');\n};\nexport const getCacheUserList = () => {\n    return localStorage.userList\n        ? JSON.parse(localStorage.userList)\n        : null;\n};\nexport const addCacheUserToList = (userInfo) => {\n    let userList = localStorage.userList\n        ? JSON.parse(localStorage.userList)\n        : [];\n    const isExist = userList.find(item => userInfo.userID === item.userID);\n    !isExist && userList.push(userInfo);\n    localStorage.setItem('userList', JSON.stringify(userList));\n};\nexport const deleteCacheUserToList = () => { };\nexport const clearCacheUserList = () => { };\nexport const createRandomName = () => {\n    return nameArr[Math.floor(Math.random() * nameArr.length)];\n};\nexport const getUserName = (value) => {\n    const cacheUserList = getCacheUserList();\n    const randomName = createRandomName();\n    const result = {\n        userName: '',\n        verify: true\n    };\n    if (value.length >= 6 && value.length <= 12) {\n        if (cacheUserList && cacheUserList.some(item => item.userID === value)) {\n            result.userName = cacheUserList.filter(item => item.userID === value)[0].userName;\n        }\n        else {\n            result.userName = randomName;\n        }\n    }\n    else {\n        result.verify = false;\n        result.userName = randomName;\n    }\n    return result;\n};\n","import CryptoJS from 'crypto-js';\nexport function generateToken(userID, seconds, appConfig) {\n    if (!userID)\n        return '';\n    console.log('===appid', appConfig);\n    const time = (Date.now() / 1000) | 0;\n    const body = {\n        app_id: appConfig.appID,\n        user_id: userID,\n        nonce: (Math.random() * 2147483647) | 0,\n        ctime: time,\n        expire: time + (seconds || 7200)\n    };\n    const key = CryptoJS.enc.Utf8.parse(appConfig.serverSecret);\n    let iv = Math.random().toString().substring(2, 18);\n    if (iv.length < 16)\n        iv += iv.substring(0, 16 - iv.length);\n    const ciphertext = CryptoJS.AES.encrypt(JSON.stringify(body), key, {\n        iv: CryptoJS.enc.Utf8.parse(iv)\n    }).toString();\n    const ciphert = Uint8Array.from(Array.from(atob(ciphertext)).map(val => val.charCodeAt(0)));\n    const len_ciphert = ciphert.length;\n    const uint8 = new Uint8Array(8 + 2 + 16 + 2 + len_ciphert);\n    uint8.set([0, 0, 0, 0]);\n    uint8.set(new Uint8Array(Int32Array.from([body.expire]).buffer).reverse(), 4);\n    uint8[8] = iv.length >> 8;\n    uint8[9] = iv.length - (uint8[8] << 8);\n    uint8.set(Uint8Array.from(Array.from(iv).map(val => val.charCodeAt(0))), 10);\n    uint8[26] = len_ciphert >> 8;\n    uint8[27] = len_ciphert - (uint8[26] << 8);\n    uint8.set(ciphert, 28);\n    const token = `04${btoa(String.fromCharCode(...Array.from(uint8)))}`;\n    console.log('generateToken', iv.length, body, token);\n    return token;\n}\n","export default {\n    appID: 2031514356,\n    serverSecret: '6e46fa37db195c449155c9fbfded9c4b'\n};\n","export var EventName;\n(function (EventName) {\n    EventName[\"zimError\"] = \"error\";\n    EventName[\"zimConnectionStateChanged\"] = \"connectionStateChanged\";\n    EventName[\"zimTokenWillExpire\"] = \"tokenWillExpire\";\n    EventName[\"zimReceivePeerMessage\"] = \"receivePeerMessage\";\n    EventName[\"zimReceiveGroupMessage\"] = \"receiveGroupMessage\";\n    EventName[\"zimConversationTotalUnreadMessageCountUpdated\"] = \"conversationTotalUnreadMessageCountUpdated\";\n    EventName[\"zimConversationChanged\"] = \"conversationChanged\";\n    EventName[\"zimKitIsLoggedIn\"] = \"isLoggedIn\";\n    EventName[\"zimKitLoginUserUpdate\"] = \"loginUserUpdate\";\n    EventName[\"zimKitDeleteConversation\"] = \"deleteConversation\";\n    EventName[\"zimKitCurrentConversationUpdate\"] = \"currentConversationUpdate\";\n    EventName[\"zimKitConversationListUpdate\"] = \"conversationListUpdate\";\n    EventName[\"zimKitConversationListQueryAbnormally\"] = \"conversationListQueryAbnormally\";\n    EventName[\"zimKitCreateGroup\"] = \"createGroup\";\n    EventName[\"zimKitCurrentChatUpdated\"] = \"currentChatUpdated\";\n    EventName[\"zimKitCurrentMessageListUpdated\"] = \"messageListUpdated\";\n    EventName[\"zimKitCurrentGroupInfoUpdated\"] = \"currentGroupInfoUpdated\";\n})(EventName || (EventName = {}));\n","export class ZIMPlatformManage {\n    constructor(platform) {\n        this.platform = platform;\n    }\n}\n","import { ZIMPlatform } from './index.entity';\nimport { ZIMPlatformManage } from './platform';\nconst platform = process.env.PLATFORM || 'web';\nexport class ZIMAdapter {\n    static initPlatform() {\n        if (platform === 'web') {\n            ZIMAdapter.zimPlatformManage = new ZIMPlatformManage(ZIMPlatform.Web);\n            return import('./web').then(zimAdapter => {\n                ZIMAdapter.zimModule = zimAdapter.ZIMWeb;\n            });\n        }\n        else {\n            return Promise.resolve();\n        }\n    }\n    static getInstance() {\n        return ZIMAdapter.zimModule.getInstance();\n    }\n    static create(appID) {\n        return ZIMAdapter.zimModule.create(appID);\n    }\n    on(type, listener) {\n        return ZIMAdapter.getInstance().on(type, listener);\n    }\n    off(type) {\n        return ZIMAdapter.getInstance().off(type);\n    }\n    login(userInfo, token) {\n        return ZIMAdapter.getInstance().login(userInfo, token);\n    }\n    logout() {\n        return ZIMAdapter.getInstance().logout();\n    }\n    destroy() {\n        return ZIMAdapter.getInstance().destroy();\n    }\n    renewToken(token) {\n        return ZIMAdapter.getInstance().renewToken(token);\n    }\n    queryConversationList(config) {\n        return ZIMAdapter.getInstance().queryConversationList(config);\n    }\n    createGroup(groupInfo, userIDs, config) {\n        return ZIMAdapter.getInstance().createGroup(groupInfo, userIDs, config);\n    }\n    sendPeerMessage(message, toUserID, config) {\n        return ZIMAdapter.getInstance().sendPeerMessage(message, toUserID, config);\n    }\n    sendGroupMessage(message, toGroupID, config) {\n        return ZIMAdapter.getInstance().sendGroupMessage(message, toGroupID, config);\n    }\n    queryHistoryMessage(conversationID, conversationType, config) {\n        return ZIMAdapter.getInstance().queryHistoryMessage(conversationID, conversationType, config);\n    }\n    deleteConversation(conversationID, conversationType, config) {\n        return ZIMAdapter.getInstance().deleteConversation(conversationID, conversationType, config);\n    }\n    clearConversationUnreadMessageCount(conversationID, conversationType) {\n        return ZIMAdapter.getInstance().clearConversationUnreadMessageCount(conversationID, conversationType);\n    }\n    queryGroupInfo(groupID) {\n        return ZIMAdapter.getInstance().queryGroupInfo(groupID);\n    }\n    queryGroupMemberList(groupID, config) {\n        return ZIMAdapter.getInstance().queryGroupMemberList(groupID, config);\n    }\n    joinGroup(groupID) {\n        return ZIMAdapter.getInstance().joinGroup(groupID);\n    }\n    leaveGroup(groupID) {\n        return ZIMAdapter.getInstance().leaveGroup(groupID);\n    }\n}\n","import { EventName } from '../Constant/event';\nexport default class ZIMKitEventHandler {\n    constructor() {\n        this.eventList = {\n            [EventName.zimError]: [],\n            [EventName.zimConnectionStateChanged]: [],\n            [EventName.zimTokenWillExpire]: [],\n            [EventName.zimReceivePeerMessage]: [],\n            [EventName.zimReceiveGroupMessage]: [],\n            [EventName.zimConversationTotalUnreadMessageCountUpdated]: [],\n            [EventName.zimConversationChanged]: [],\n            [EventName.zimKitIsLoggedIn]: [],\n            [EventName.zimKitLoginUserUpdate]: [],\n            [EventName.zimKitDeleteConversation]: [],\n            [EventName.zimKitConversationListUpdate]: [],\n            [EventName.zimKitCurrentConversationUpdate]: [],\n            [EventName.zimKitConversationListQueryAbnormally]: [],\n            [EventName.zimKitCreateGroup]: [],\n            [EventName.zimKitCurrentChatUpdated]: [],\n            [EventName.zimKitCurrentMessageListUpdated]: [],\n            [EventName.zimKitCurrentGroupInfoUpdated]: []\n        };\n        if (!ZIMKitEventHandler.instance) {\n            ZIMKitEventHandler.instance = this;\n        }\n        return ZIMKitEventHandler.instance;\n    }\n    static getInstance() {\n        if (!ZIMKitEventHandler.instance) {\n            ZIMKitEventHandler.instance = new ZIMKitEventHandler();\n        }\n        return ZIMKitEventHandler.instance;\n    }\n    addEventListener(event, callBackList) {\n        if (!this.eventList[event]) {\n            return false;\n        }\n        if (!Array.isArray(callBackList)) {\n            return false;\n        }\n        callBackList.forEach(callBack => {\n            !this.eventList[event].includes(callBack) &&\n                this.eventList[event].push(callBack);\n        });\n        return true;\n    }\n    removeEventListener(event, callBackList) {\n        if (!this.eventList[event]) {\n            return false;\n        }\n        const li = this.eventList[event];\n        if (callBackList && callBackList.length) {\n            callBackList.forEach(callBack => {\n                li.splice(li.indexOf(callBack), 1);\n            });\n        }\n        else {\n            this.eventList[event] = [];\n        }\n        return true;\n    }\n    actionListener(event, ...args) {\n        this.eventList[event] &&\n            this.eventList[event].forEach(func => {\n                func(...args);\n            });\n    }\n}\n","export default {\n    common_yesterday: \"昨天\",\n    common_user_kick_out: \"重复登录，用户被踢出\",\n    common_monday: \"周一\",\n    common_tuesday: \"周二\",\n    common_wednesday: \"周三\",\n    common_thursday: \"周四\",\n    common_friday: \"周五\",\n    common_saturday: \"周六\",\n    common_sunday: \"周日\",\n    common_logout: \"退出\",\n    common_return: \"返回\",\n    conversation_start_chat_w: \"发起聊天\",\n    conversation_empty: \"暂无消息\\n快去发起聊天吧\",\n    conversation_start_single_chat: \"发起单聊\",\n    conversation_start_group_chat: \"发起群聊\",\n    conversation_join_group_chat: \"加入群聊\",\n    conversation_cancel: \"取消\",\n    conversation_delete: \"删除\",\n    conversation_message_total_count: \"消息总数\",\n    conversation_reload: \"重新加载\",\n    conversation_enter_touserid_w: \"请输入对方用户ID\",\n    conversation_close_chat_w: \"关闭聊天\",\n    demo_login_hint: \"输入用户id\",\n    demo_login: \"登录\",\n    demo_user_name: \"用户名为:%s\",\n    demo_user_name_w: \"随机用户昵称\",\n    demo_welcome: \"您好，\\n欢迎使用 \\nZEGO In-app Chat\",\n    demo_input_user_id_error_tips: \"请输入6–12位英文或数字的用户ID\",\n    demo_input_placeholder_w: \"请输入6–12位英文或数字的用户ID\",\n    demo_user_id_login: \"用户ID登录\",\n    group_create_chat: \"发起会话\",\n    group_input_group_id: \"输入群ID\",\n    group_input_group_id_w: \"输入群聊ID\",\n    group_input_group_name: \"输入群聊名称\",\n    group_input_user_id_of_group: \"输入群成员的用户ID，';'英文分号隔开\",\n    group_input_user_id_of_group_w: \"输入群成员的用户ID，';'英文分号隔开\",\n    group_user_id_cant_null: \"用户id不能为空\",\n    group_create_group_chat_title: \"发起群聊会话\",\n    group_join_group_chat: \"加入群聊会话\",\n    group_user_not_exit: \"用户不存在\",\n    group_group_not_exit: \"群不存在\",\n    group_group_user_id_not_exit: \"群成员用户ID %s 不存在，请返回\",\n    group_group_user_id_not_exit_w: \"请返回修改\",\n    group_group_id_not_exit: \"群ID %s 不存在，请返回\",\n    group_group_id_not_exit_w: \"不存在，请返回修改\",\n    group_input_user_id_error_tip: \"请输入6–12位英文或数字的用户ID\",\n    group_group_id: \"群聊ID\",\n    group_copy: \"复制\",\n    group_copy_success: \"复制成功\",\n    message_input_new_message: \"输入新消息\",\n    message_user_not_exit_please_again: \"用户ID:%s不存在，请返回重新添加\",\n    message_user_not_exit_please_again_w_1: \"用户ID\",\n    message_user_not_exit_please_again_w_2: \"不存在，请返回重新添加\",\n    message_cant_send_empty_msg: \"不允许发送空白消息\",\n    message_create_chat: \"发起会话\",\n    message_input_user_id_error_tips: \"请输入6–12位英文或数字的用户ID\",\n    message_create_single_chat: \"发起单聊会话\",\n    message_send_w: \"发送\",\n    message_empty_w: \"暂时还没有收到消息\",\n};\n","export default {\n    common_yesterday: \"Yesterday\",\n    common_user_kick_out: \"The user is kicked out because the ID is reused for login. \",\n    common_monday: \"Monday\",\n    common_tuesday: \"Tuesday\",\n    common_wednesday: \"Wednesday\",\n    common_thursday: \"Thursday\",\n    common_friday: \"Friday\",\n    common_saturday: \"Saturday\",\n    common_sunday: \"Sunday\",\n    common_logout: \"Log out\",\n    common_return: \"Back\",\n    conversation_start_chat_w: \"New Chat\",\n    conversation_empty: \"No chats.\\nStart chatting now.\",\n    conversation_start_single_chat: \"One-on-one chat\",\n    conversation_start_group_chat: \"Group chat\",\n    conversation_join_group_chat: \"Join a group\",\n    conversation_cancel: \"Cancel\",\n    conversation_delete: \"Delete\",\n    conversation_message_total_count: \"Chats\",\n    conversation_reload: \"Reload\",\n    conversation_enter_touserid_w: \"Enter a user ID\",\n    conversation_close_chat_w: \"Delete\",\n    demo_login_hint: \"User ID\",\n    demo_login: \"Log in\",\n    demo_user_name: \"Username: %s\",\n    demo_user_name_w: \"Random nickname\",\n    demo_welcome: \"Hi, \\nwelcome to \\nZEGOCLOUD In-app Chat.\",\n    demo_input_user_id_error_tips: \"The userID must be between 6-12 characters using letters and numbers.\",\n    demo_input_placeholder_w: \"6-12 bit userID, include letters and numbers\",\n    demo_user_id_login: \"User Login\",\n    group_create_chat: \"OK\",\n    group_input_group_id: \"Group ID\",\n    group_input_group_id_w: \"Group ID\",\n    group_input_group_name: \"Group name\",\n    group_input_user_id_of_group: \"Enter the user IDS of the group members, separated by ';'.\",\n    group_input_user_id_of_group_w: \"Enter the user IDS of the group members, separated by ';'.\",\n    group_user_id_cant_null: \"User ID is required.\",\n    group_create_group_chat_title: \"New group chat\",\n    group_join_group_chat: \"Join a group chat\",\n    group_user_not_exit: \"The user doesn't exist.\",\n    group_group_not_exit: \"The group doesn't exist.\",\n    group_group_user_id_not_exit: \"The user ID (%s) doesn't exist. Please modify and try again.\",\n    group_group_user_id_not_exit_w: \"Please modify and try again.\",\n    group_group_id_not_exit: \"The group (%s) doesn't exist. Please try again.\",\n    group_group_id_not_exit_w: \"It doesn't exist. Please modify and try again.\",\n    group_input_user_id_error_tip: \"The userID must be between 6-12 characters using letters and numbers.\",\n    group_group_id: \"Group ID\",\n    group_copy: \"Copy\",\n    group_copy_success: \"Copied.\",\n    message_input_new_message: \"\",\n    message_user_not_exit_please_again: \"The user ID (%s) doesn't exist. Please try again.\",\n    message_user_not_exit_please_again_w_1: \"User ID\",\n    message_user_not_exit_please_again_w_2: \"It doesn't exist. Please try again.\",\n    message_cant_send_empty_msg: \"Blank messages are not allowed\",\n    message_create_chat: \"OK\",\n    message_input_user_id_error_tips: \"The userID must be between 6-12 characters using letters and numbers.\",\n    message_create_single_chat: \"New 1-on-1 chat\",\n    message_send_w: \"Send\",\n    message_empty_w: \"No messages received.\",\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport zh from '../../locales/zh';\nimport en from '../../locales/en';\nclass ZIMKiti18n {\n    constructor() {\n        this.localesData = {\n            en: {},\n            zh: {}\n        };\n        this.i18next = i18n.use(initReactI18next);\n        if (!ZIMKiti18n.instance) {\n            const localesData = { en, zh };\n            this.localesData = localesData;\n            ZIMKiti18n.instance = this;\n        }\n        return ZIMKiti18n.instance;\n    }\n    static getInstance() {\n        if (!ZIMKiti18n.instance) {\n            ZIMKiti18n.instance = new ZIMKiti18n();\n        }\n        return ZIMKiti18n.instance;\n    }\n    static destroy() {\n        ZIMKiti18n.instance.localesData = { en: {}, cn: {} };\n        ZIMKiti18n.instance = null;\n    }\n    init() {\n        const options = {\n            resources: {\n                zh: { translation: this.localesData.zh },\n                en: { translation: this.localesData.en }\n            },\n            fallbackLng: navigator.language,\n            detection: {\n                caches: ['localStorage', 'sessionStorage', 'cookie']\n            }\n        };\n        return this.i18next.init(options);\n    }\n    provideMessage(localesData) {\n        this.localesData.en = Object.assign(Object.assign({}, this.localesData.en), localesData.en);\n        this.localesData.zh = Object.assign(Object.assign({}, this.localesData.zh), localesData.zh);\n        return this.localesData;\n    }\n    getLocalesData() {\n        return this.localesData;\n    }\n    getI18next() {\n        return this.i18next;\n    }\n}\nexport default ZIMKiti18n;\n","import { ZIMAdapter } from \"../../ZIMAdapter\";\nimport ZIMKitEventHandler from \"./ZIMKitEventHandler\";\nimport { EventName } from \"../Constant/event\";\nimport ZIMKiti18n from \"../../../plugin/i18n\";\nZIMKiti18n.getInstance().init();\nexport default class ZIMKitManager {\n    constructor() {\n        this.eventHandler = ZIMKitEventHandler.getInstance();\n        this.userInfo = {};\n        this.isInit = false;\n        this.isLoggedIn = false;\n        if (!ZIMKitManager.instance) {\n            ZIMKitManager.instance = this;\n        }\n        return ZIMKitManager.instance;\n    }\n    static getInstance() {\n        if (!ZIMKitManager.instance) {\n            ZIMKitManager.instance = new ZIMKitManager();\n        }\n        return ZIMKitManager.instance;\n    }\n    createZIM(appConfig) {\n        this.appConfig = appConfig;\n        return ZIMAdapter.initPlatform().then(() => {\n            this.zim = ZIMAdapter.create(appConfig.appID);\n            this.isInit = true;\n            this.onEvent();\n            window.manager = this;\n        });\n    }\n    loginWithUserInfo(userInfo, token) {\n        this.userInfo = userInfo;\n        return this.zim.login(userInfo, token).then(() => {\n            this.token = token;\n            this.isLoggedIn = true;\n            this.eventHandler.actionListener(EventName.zimKitIsLoggedIn);\n            this.eventHandler.actionListener(EventName.zimKitLoginUserUpdate, userInfo);\n        });\n    }\n    logout() {\n        this.isLoggedIn = false;\n        this.token = \"\";\n        return this.zim.logout();\n    }\n    destroy() {\n        this.offEvent();\n        this.zim.destroy();\n        this.isInit = false;\n    }\n    registerConnectionStateChangedCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimConnectionStateChanged, [\n            callback,\n        ]);\n    }\n    onEvent() {\n        this.zim.on(EventName.zimError, (zim, errorInfo) => {\n            this.eventHandler.actionListener(EventName.zimError, errorInfo);\n        });\n        this.zim.on(EventName.zimConnectionStateChanged, (zim, data) => {\n            if (data.state === 0 && data.event === 3) {\n                this.zim.login(this.userInfo, this.token);\n            }\n            this.eventHandler.actionListener(EventName.zimConnectionStateChanged, data);\n        });\n        this.zim.on(EventName.zimReceivePeerMessage, (zim, data) => {\n            this.eventHandler.actionListener(EventName.zimReceivePeerMessage, data);\n        });\n        this.zim.on(EventName.zimReceiveGroupMessage, (zim, data) => {\n            this.eventHandler.actionListener(EventName.zimReceiveGroupMessage, data);\n        });\n        this.zim.on(EventName.zimConversationTotalUnreadMessageCountUpdated, (zim, data) => {\n            this.eventHandler.actionListener(EventName.zimConversationTotalUnreadMessageCountUpdated, data);\n        });\n        this.zim.on(EventName.zimConversationChanged, (zim, data) => {\n            this.eventHandler.actionListener(EventName.zimConversationChanged, data);\n        });\n    }\n    offEvent() {\n        this.zim.off(EventName.zimError);\n        this.zim.off(EventName.zimConversationChanged);\n        this.zim.off(EventName.zimTokenWillExpire);\n        this.zim.off(EventName.zimReceivePeerMessage);\n        this.zim.off(EventName.zimReceiveGroupMessage);\n        this.zim.off(EventName.zimConversationTotalUnreadMessageCountUpdated);\n    }\n}\n","import React, { FormEvent } from 'react';\nimport { connect } from 'react-redux';\nimport { login, selectIsLoggedIn } from '../../store/authSlice';\nimport { addCacheUserToList, getUserName, setCacheUserInfo } from '../../util';\nimport { generateToken } from '../../util/token';\nimport appConfig from '../../config';\nimport ZIMKitManager from '../../ZIMKit/src/components/ZIMKitCommon/VM/ZIMKitManager';\nimport './style.css';\nimport { Navigate } from 'react-router-dom';\nimport { ZIMError } from '../../ZIMKit/src/components/ZIMAdapter/index.entity';\nimport ZIMKiti18n from '../../ZIMKit/src/plugin/i18n';\nconst i18n = ZIMKiti18n.getInstance().getI18next() as any;\n\nclass LoginPage extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = { userID: '', userName: '', verify: false };\n    this.getUserName = this.getUserName.bind(this);\n    this.loginFun = this.loginFun.bind(this);\n  }\n  componentDidMount(): void {\n    const result = getUserName('');\n    this.setState({ ...result });\n  }\n  getUserName(event: FormEvent) {\n    const userID = (event.target as HTMLInputElement).value;\n    const result = getUserName(userID);\n    this.setState({ userID, ...result });\n  }\n  loginFun() {\n    const token = generateToken(this.state.userID, 0, appConfig);\n    const userInfo = {\n      userID: this.state.userID,\n      userName: this.state.userName\n    };\n    ZIMKitManager.getInstance()\n      .loginWithUserInfo(userInfo, token)\n      .then(() => {\n        setCacheUserInfo(userInfo);\n        addCacheUserToList(userInfo);\n        this.props.login();\n      })\n      .catch((error: ZIMError) => {\n        this.setState({ verify: false });\n      });\n  }\n  render() {\n    return (\n      <div id=\"login-con\">\n        <div id=\"login\">\n          {this.props.isLoggedIn && <Navigate to=\"/main\" replace={true} />}\n          <div className=\"login-box\">\n            <div className=\"welcome-box\">\n              <div className=\"welcome-text\">{i18n.t('demo_welcome')}</div>\n            </div>\n            <div className={`form ${i18n.language === 'en' ? 'en-form' : null}`}>\n              <div className=\"id\">\n                <div className=\"label\">{i18n.t('demo_user_id_login')}</div>\n                <input\n                  className={i18n.language === 'en' ? 'en-input' : ''}\n                  placeholder={i18n.t('demo_input_placeholder_w')}\n                  onInput={this.getUserName}\n                />\n                <div\n                  className=\"login-err-tip\"\n                  style={{\n                    display:\n                      !this.state.verify && this.state.userID ? 'block' : 'none'\n                  }}>\n                  {i18n.t('demo_input_user_id_error_tips')}\n                </div>\n              </div>\n              <div className=\"name\">\n                <div className=\"label\">{i18n.t('demo_user_name_w')}</div>\n                <div id=\"userName\">{this.state.userName}</div>\n              </div>\n              <button\n                className=\"login-btn\"\n                onClick={this.loginFun}\n                disabled={!this.state.verify}>\n                {i18n.t('demo_login')}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>  \n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: (arg0: { payload: any; type: string; }) => any) => {\n  return {\n    login: (content: any) => dispatch(login(content))\n  };\n};\n\nexport default connect(selectIsLoggedIn, mapDispatchToProps)(LoginPage);\n","export default class ZIMKitConversationModel {\n    constructor(conversation) {\n        this.conversationID = conversation.conversationID;\n        this.conversationName = conversation.conversationName;\n        this.type = conversation.type;\n        this.unreadMessageCount = conversation.unreadMessageCount;\n        this.lastMessage = conversation.lastMessage;\n        this.orderKey = conversation.orderKey;\n        this.notificationStatus = conversation.notificationStatus;\n    }\n}\n","import ZIMKitManager from \"../../ZIMKitCommon/VM/ZIMKitManager\";\nimport ZIMKitEventHandler from \"../../ZIMKitCommon/VM/ZIMKitEventHandler\";\nimport ZIMKitConversationModel from \"../Model\";\nimport { EventName } from \"../../ZIMKitCommon/Constant/event\";\nexport default class ZIMKitConversationVM {\n    constructor() {\n        this.eventHandler = ZIMKitEventHandler.getInstance();\n        this.pagePullCount = 100;\n        this.conversationList = [];\n        this.totalUnreadMessageCount = 0;\n        this.isAbnormal = false;\n        this.activeCvID = \"\";\n        this.loadStatus = 0;\n        if (!ZIMKitConversationVM.instance) {\n            ZIMKitConversationVM.instance = this;\n            ZIMKitConversationVM.instance.initListenerHandle();\n        }\n        return ZIMKitConversationVM.instance;\n    }\n    static getInstance() {\n        if (!ZIMKitConversationVM.instance) {\n            ZIMKitConversationVM.instance = new ZIMKitConversationVM();\n        }\n        return ZIMKitConversationVM.instance;\n    }\n    initListenerHandle() {\n        this.eventHandler.addEventListener(EventName.zimConversationTotalUnreadMessageCountUpdated, [\n            (data) => {\n                this.totalUnreadMessageCount = data.totalUnreadMessageCount;\n            },\n        ]);\n        this.eventHandler.addEventListener(EventName.zimConversationChanged, [\n            (data) => {\n                if (this.loadStatus !== 2) {\n                    return;\n                }\n                let updateListFlag = false;\n                let updateCurrentFlag = false;\n                data.infoList.forEach((info) => {\n                    switch (info.event) {\n                        case 1:\n                            if (this.conversationList.length) {\n                                let isExist = false;\n                                this.conversationList.forEach((item) => {\n                                    if (item.conversationID === info.conversation.conversationID) {\n                                        isExist = true;\n                                        Object.assign(item, info.conversation);\n                                        if (this.activeCvID === info.conversation.conversationID) {\n                                            updateCurrentFlag = true;\n                                        }\n                                        updateListFlag = true;\n                                    }\n                                });\n                                if (!isExist) {\n                                    this.conversationList.push(info.conversation);\n                                    updateListFlag = true;\n                                }\n                            }\n                            else {\n                                this.conversationList.push(info.conversation);\n                                this.activeCvID = info.conversation.conversationID;\n                                updateListFlag = true;\n                                updateCurrentFlag = true;\n                            }\n                            break;\n                        case 0:\n                            const len = this.conversationList.length;\n                            updateListFlag = this.insetConversationList(info.conversation);\n                            if (!len) {\n                                this.activeCvID = info.conversation.conversationID;\n                                updateCurrentFlag = true;\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                });\n                if (updateListFlag) {\n                    this.sortCvListHandle();\n                    this.eventHandler.actionListener(EventName.zimKitConversationListUpdate, this.conversationList);\n                }\n                if (updateCurrentFlag) {\n                    const currentConversation = this.getConversationByID(this.activeCvID);\n                    this.eventHandler.actionListener(EventName.zimKitCurrentConversationUpdate, currentConversation);\n                    currentConversation.unreadMessageCount &&\n                        this.clearConversationUnreadMessageCount(currentConversation.conversationID, currentConversation.type);\n                }\n            },\n        ]);\n    }\n    loadConversationList() {\n        const config = {\n            nextConversation: undefined,\n            count: localStorage.count || this.pagePullCount,\n        };\n        if (this.loadStatus === 1) {\n            return Promise.reject();\n        }\n        this.loadStatus = 1;\n        return ZIMKitManager.getInstance()\n            .zim.queryConversationList(config)\n            .then((data) => {\n            this.loadStatus = 2;\n            this.isAbnormal = false;\n            this.conversationList.length = 0;\n            data.conversationList.forEach((item) => {\n                if (item.type === 0 || item.type === 2) {\n                    this.conversationList.push(new ZIMKitConversationModel(item));\n                }\n            });\n            this.sortCvListHandle();\n            if (this.conversationList.length && !this.activeCvID) {\n                const firstConversation = this.conversationList[0];\n                this.activeCvID = firstConversation.conversationID;\n                this.clearConversationUnreadMessageCount(firstConversation.conversationID, firstConversation.type);\n            }\n            this.eventHandler.actionListener(EventName.zimKitConversationListUpdate, this.conversationList);\n            this.eventHandler.actionListener(EventName.zimKitCurrentConversationUpdate, this.getConversationByID(this.activeCvID));\n            this.eventHandler.actionListener(EventName.zimKitConversationListQueryAbnormally, false);\n        })\n            .catch((error) => {\n            this.loadStatus = 2;\n            this.isAbnormal = true;\n            this.eventHandler.actionListener(EventName.zimKitConversationListQueryAbnormally, true);\n        });\n    }\n    setCurrentConversation(conversationID) {\n        this.activeCvID = conversationID;\n        this.eventHandler.actionListener(EventName.zimKitCurrentConversationUpdate, this.getConversationByID(conversationID));\n    }\n    setTempConversation(conversation) {\n        this.activeCvID = conversation.conversationID;\n        this.eventHandler.actionListener(EventName.zimKitCurrentConversationUpdate, conversation);\n    }\n    loadNextPage() {\n        const config = {\n            nextConversation: this.conversationList[this.conversationList.length - 1],\n            count: this.pagePullCount,\n        };\n        ZIMKitManager.getInstance()\n            .zim.queryConversationList(config)\n            .then((data) => {\n            data.conversationList.forEach((item) => {\n                if (item.type === 0 || item.type === 2) {\n                    this.conversationList.push(new ZIMKitConversationModel(item));\n                }\n            });\n            this.sortCvListHandle();\n            this.eventHandler.actionListener(EventName.zimKitConversationListUpdate, this.conversationList);\n        });\n    }\n    deleteConversation(conversationID, conversationType) {\n        const config = { isAlsoDeleteServerConversation: true };\n        return ZIMKitManager.getInstance()\n            .zim.deleteConversation(conversationID, conversationType, config)\n            .then((data) => {\n            this.conversationList.forEach((item, index) => {\n                if (item.conversationID === data.conversationID) {\n                    this.conversationList.splice(index, 1);\n                }\n            });\n            if (conversationID === this.activeCvID &&\n                this.conversationList.length) {\n                this.activeCvID = this.conversationList[0].conversationID;\n                this.eventHandler.actionListener(EventName.zimKitCurrentConversationUpdate, this.conversationList[0]);\n            }\n            this.eventHandler.actionListener(EventName.zimKitConversationListUpdate, this.conversationList);\n            this.eventHandler.actionListener(EventName.zimKitDeleteConversation, conversationID);\n            return data;\n        });\n    }\n    removeData() { }\n    clearConversationUnreadMessageCount(conversationID, conversationType) {\n        return ZIMKitManager.getInstance()\n            .zim.clearConversationUnreadMessageCount(conversationID, conversationType)\n            .catch((error) => {\n            console.error(error);\n        });\n    }\n    registerIsLoggedInCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimKitIsLoggedIn, [callback]);\n    }\n    registerCvTotalUnreadMessageCountUpdatedCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimConversationTotalUnreadMessageCountUpdated, [callback]);\n    }\n    registerCvListUpdatedCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimKitConversationListUpdate, [\n            callback,\n        ]);\n    }\n    registerAbnormalCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimKitConversationListQueryAbnormally, [callback]);\n    }\n    registerCurrentCvUpdatedCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimKitCurrentConversationUpdate, [callback]);\n    }\n    unInit() {\n        this.conversationList.length = 0;\n        this.totalUnreadMessageCount = 0;\n        this.isAbnormal = false;\n        this.activeCvID = \"\";\n        this.loadStatus = 0;\n    }\n    getConversationByID(conversationID) {\n        return this.conversationList.filter((conversation) => conversation.conversationID === conversationID)[0];\n    }\n    insetConversationList(insetConversation) {\n        let result = false;\n        const isExist = this.conversationList.find((conversation) => insetConversation.conversationID === conversation.conversationID);\n        if (isExist === undefined) {\n            this.conversationList.push(insetConversation);\n            result = true;\n        }\n        return result;\n    }\n    sortCvListHandle() {\n        this.conversationList.sort((a, b) => b.orderKey - a.orderKey);\n    }\n}\n","import { EventName } from '../../ZIMKitCommon/Constant/event';\nimport ZIMKitEventHandler from '../../ZIMKitCommon/VM/ZIMKitEventHandler';\nimport ZIMKitManager from '../../ZIMKitCommon/VM/ZIMKitManager';\nexport default class ZIMKitGroupVM {\n    constructor() {\n        this.eventHandler = ZIMKitEventHandler.getInstance();\n        this.memberList = [];\n        if (!ZIMKitGroupVM.instance) {\n            ZIMKitGroupVM.instance = this;\n            ZIMKitGroupVM.instance.initListenerHandle();\n        }\n        return ZIMKitGroupVM.instance;\n    }\n    static getInstance() {\n        if (!ZIMKitGroupVM.instance) {\n            ZIMKitGroupVM.instance = new ZIMKitGroupVM();\n        }\n        return ZIMKitGroupVM.instance;\n    }\n    initListenerHandle() {\n        this.eventHandler.addEventListener(EventName.zimKitCreateGroup, [() => { }]);\n        this.eventHandler.addEventListener(EventName.zimKitCurrentConversationUpdate, [\n            conversation => {\n                if (!conversation)\n                    return;\n                if (conversation.type === 2) {\n                    this.currentGroupInfo = {\n                        baseInfo: {\n                            groupID: conversation.conversationID,\n                            groupName: conversation.conversationName\n                        }\n                    };\n                    this.eventHandler.actionListener(EventName.zimKitCurrentGroupInfoUpdated, this.currentGroupInfo);\n                    this.queryGroupMemberList(conversation.conversationID);\n                }\n            }\n        ]);\n    }\n    createGroup(groupID, groupName, userIDList) {\n        const currentGroupInfo = { groupID, groupName };\n        return ZIMKitManager.getInstance()\n            .zim.createGroup(currentGroupInfo, userIDList)\n            .then((data) => {\n            this.currentGroupInfo = data.groupInfo;\n            this.eventHandler.actionListener(EventName.zimKitCurrentGroupInfoUpdated, this.currentGroupInfo);\n            return data;\n        });\n    }\n    queryGroupMemberList(groupID) {\n        const config = { count: 100, nextFlag: 0 };\n        return ZIMKitManager.getInstance()\n            .zim.queryGroupMemberList(groupID, config)\n            .then(data => {\n            this.memberList = data.userList;\n        });\n    }\n    joinGroup(groupID) {\n        return ZIMKitManager.getInstance()\n            .zim.joinGroup(groupID)\n            .then((data) => {\n            this.currentGroupInfo = data.groupInfo;\n            this.eventHandler.actionListener(EventName.zimKitCurrentGroupInfoUpdated, this.currentGroupInfo);\n            return data;\n        });\n    }\n    leaveGroup(groupID) {\n        return ZIMKitManager.getInstance().zim.leaveGroup(groupID);\n    }\n    dismissGroup(groupID) { }\n    inviteUsersJoinGroup(userIDList, groupID) { }\n    kickGroupMembers(userIDList, groupID) { }\n    queryGroupInfo(groupID) {\n        return ZIMKitManager.getInstance().zim.queryGroupInfo(groupID);\n    }\n    unInit() {\n        this.currentGroupInfo = null;\n        this.memberList.length = 0;\n    }\n    registerCurrentGroupInfoUpdateCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimKitCurrentGroupInfoUpdated, [callback]);\n    }\n}\n","import React, { FormEvent } from 'react';\nimport './../../common.css';\nimport './style.css';\nimport ZIMKiti18n from '../../../../../plugin/i18n';\nconst i18n = ZIMKiti18n.getInstance().getI18next() as any;\n\ninterface TabData {\n  id: number;\n  text: string;\n  actived?: boolean;\n}\n\nclass TabItem extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.changeNav = this.changeNav.bind(this);\n  }\n  changeNav() {\n    this.props.onNavChange(this.props.item);\n  }\n  render() {\n    return (\n      <div\n        className={'title' + (this.props.item.actived ? ' actived' : '')}\n        onClick={this.changeNav}>\n        {this.props.item.text}\n      </div>\n    );\n  }\n}\n\nclass TabList extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      tabList: (this.props.tabList as TabData[]).map((element, index) => {\n        return { ...element, actived: !index ? true : false };\n      })\n    };\n    this.handleNavChange = this.handleNavChange.bind(this);\n  }\n  handleNavChange(current: TabData) {\n    (this.state.tabList as TabData[]).forEach(item => {\n      item.actived = item.id === current.id;\n    });\n    this.setState({\n      tabList: this.state.tabList\n    });\n    this.props.onNavChange(current);\n  }\n  render() {\n    let tabListView = null;\n    if (this.state.tabList) {\n      tabListView = (this.state.tabList as TabData[]).map(element => (\n        <TabItem\n          key={element.id}\n          item={element}\n          onNavChange={this.handleNavChange}\n        />\n      ));\n    }\n    return <div className=\"top\">{tabListView}</div>;\n  }\n}\n\nclass TableContent extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      peerErrTip: false,\n      peerDisabled: true,\n      groupErrTip: false,\n      groupDisabled: true,\n      groupID: '',\n      toUserID: '',\n      groupName: '',\n      userIDList: ''\n    };\n    this.closeDialog = this.closeDialog.bind(this);\n    this.createPeerChat = this.createPeerChat.bind(this);\n    this.createGroupChat = this.createGroupChat.bind(this);\n    this.joinGroup = this.joinGroup.bind(this);\n    this.handleUserIDInputChange = this.handleUserIDInputChange.bind(this);\n    this.handleGroupUserIDInputChange = this.handleGroupUserIDInputChange.bind(\n      this\n    );\n    this.handleGroupIDInputChange = this.handleGroupIDInputChange.bind(this);\n    this.handleGroupNameInputChange = this.handleGroupNameInputChange.bind(\n      this\n    );\n  }\n  closeDialog() {\n    this.props.onCloseDialog();\n  }\n  createPeerChat() {\n    this.props.onCreatePeerChat(this.state.toUserID);\n  }\n  createGroupChat() {\n    this.props.onCreateGroupChat(this.state.groupName, this.state.userIDList);\n  }\n  joinGroup() {\n    this.props.onJoinGroup(this.state.groupID);\n  }\n  handleUserIDInputChange(event: FormEvent) {\n    const toUserID = (event.target as HTMLInputElement).value;\n    if (toUserID.length) {\n      const result = toUserID.length < 6 || toUserID.length > 12;\n      this.setState({\n        toUserID,\n        peerErrTip: result,\n        peerDisabled: result\n      });\n    } else {\n      this.setState({\n        toUserID,\n        peerErrTip: false,\n        peerDisabled: true\n      });\n    }\n  }\n  handleGroupUserIDInputChange(event: FormEvent) {\n    const userIDList = (event.target as HTMLInputElement).value;\n    let groupDisabled = true,\n      groupErrTip = true;\n    if (this.state.groupName.length && userIDList.length) {\n      groupDisabled = false;\n    }\n    if (userIDList) {\n      const arr = userIDList.split(';');\n      let flag = false;\n      arr.forEach(item => {\n        if (item.length < 6 || item.length > 12) {\n          flag = true;\n          groupDisabled = true;\n        }\n      });\n      groupErrTip = flag;\n    } else {\n      groupErrTip = false;\n    }\n    this.setState({\n      userIDList,\n      groupErrTip,\n      groupDisabled\n    });\n  }\n  handleGroupIDInputChange(event: FormEvent) {\n    this.setState({\n      groupID: (event.target as HTMLInputElement).value\n    });\n  }\n  handleGroupNameInputChange(event: FormEvent) {\n    const groupName = (event.target as HTMLInputElement).value\n    this.setState({\n      groupName,\n      groupDisabled: !(groupName.length && this.state.userIDList.length)\n    });\n  }\n  render() {\n    let tableContentView = null;\n    let errTipView = null;\n    const {\n      groupID,\n      peerDisabled,\n      groupDisabled,\n      peerErrTip,\n      groupErrTip,\n      toUserID,\n      userIDList\n    } = this.state;\n    const { currentActived } = this.props;\n    if ((peerErrTip && toUserID) || (groupErrTip && userIDList)) {\n      // @ts-ignore\n      errTipView = (\n        <div className=\"err-tip\">{i18n.t('demo_input_user_id_error_tips')}</div>\n      );\n    }\n    if (currentActived === 1) {\n      // @ts-ignore\n      tableContentView = (\n        <div className=\"peer\" key=\"peer\">\n          <div className=\"input-box\">\n            <input\n              className={i18n.language === 'en' ? 'en-input' : ''}\n              type=\"text\"\n              name=\"userID\"\n              placeholder={i18n.t('conversation_enter_touserid_w')}\n              onInput={this.handleUserIDInputChange}\n            />\n            {errTipView}\n          </div>\n          <div className=\"btn-box\">\n            <button className=\"btn cancel-btn\" onClick={this.closeDialog}>\n              {i18n.t('conversation_cancel')}\n            </button>\n            <button\n              className=\"btn create-peer-btn\"\n              onClick={this.createPeerChat}\n              disabled={peerDisabled}>\n              {i18n.t('conversation_start_single_chat')}\n            </button>\n          </div>\n        </div>\n      );\n    } else if (currentActived === 2) {\n      // @ts-ignore\n      tableContentView = (\n        <div className=\"group\" key=\"group\">\n          <div className=\"input-box\">\n            <input\n              className={i18n.language === 'en' ? 'en-input' : ''}\n              type=\"text\"\n              name=\"groupName\"\n              placeholder={i18n.t('group_input_group_name')}\n              onInput={this.handleGroupNameInputChange}\n              maxLength={12}\n            />\n            <input\n              className={i18n.language === 'en' ? 'en-input' : ''}\n              type=\"text\"\n              name=\"userIDList\"\n              placeholder={i18n.t('group_input_user_id_of_group_w')}\n              onInput={this.handleGroupUserIDInputChange}\n            />\n            {errTipView}\n          </div>\n          <div className=\"btn-box\">\n            <button className=\"btn cancel-btn\" onClick={this.closeDialog}>\n              {i18n.t('conversation_cancel')}\n            </button>\n            <button\n              className=\"btn create-peer-btn\"\n              onClick={this.createGroupChat}\n              disabled={groupDisabled}>\n              {i18n.t('conversation_start_group_chat')}\n            </button>\n          </div>\n        </div>\n      );\n    } else if (currentActived === 3) {\n      // @ts-ignore\n      tableContentView = (\n        <div className=\"attend\" key=\"attend\">\n          <div className=\"input-box\">\n            <input\n              className={i18n.language === 'en' ? 'en-input' : ''}\n              type=\"text\"\n              name=\"groupID\"\n              placeholder={i18n.t('group_input_group_id_w')}\n              onInput={this.handleGroupIDInputChange}\n            />\n          </div>\n          <div className=\"btn-box\">\n            <button className=\"btn cancel-btn\" onClick={this.closeDialog}>\n              {i18n.t('conversation_cancel')}\n            </button>\n            <button\n              className=\"btn create-peer-btn\"\n              onClick={this.joinGroup}\n              disabled={!groupID}>\n              {i18n.t('conversation_join_group_chat')}\n            </button>\n          </div>\n        </div>\n      );\n    }\n    return <div className=\"content\">{tableContentView}</div>;\n  }\n}\n\nclass CreateChatDialog extends React.Component<any, any> {\n  tabList = [\n    {\n      id: 1,\n      text: i18n.t('conversation_start_single_chat')\n    },\n    {\n      id: 2,\n      text: i18n.t('conversation_start_group_chat')\n    },\n    {\n      id: 3,\n      text: i18n.t('conversation_join_group_chat')\n    }\n  ];\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      currentActived: 1\n    };\n    this.handleNavChange = this.handleNavChange.bind(this);\n    this.handleCloseDialog = this.handleCloseDialog.bind(this);\n    this.handleJoinGroup = this.handleJoinGroup.bind(this);\n    this.handleCreatePeerChat = this.handleCreatePeerChat.bind(this);\n    this.handleCreateGroupChat = this.handleCreateGroupChat.bind(this);\n  }\n  handleNavChange(current: TabData) {\n    this.setState({\n      currentActived: current.id\n    });\n  }\n  handleCloseDialog() {\n    this.props.onCloseDialog();\n  }\n  handleJoinGroup(groupID: string) {\n    this.props.onJoinGroup(groupID);\n  }\n  handleCreatePeerChat(toUserID: string) {\n    this.props.onCreatePeerChat(toUserID);\n  }\n  handleCreateGroupChat(groupName: string, userIDList: string) {\n    this.props.onCreateGroupChat(groupName, userIDList);\n  }\n  render() {\n    return (\n      <div className=\"dialog\">\n        <TabList tabList={this.tabList} onNavChange={this.handleNavChange} />\n        <TableContent\n          currentActived={this.state.currentActived}\n          onCloseDialog={this.handleCloseDialog}\n          onJoinGroup={this.handleJoinGroup}\n          onCreatePeerChat={this.handleCreatePeerChat}\n          onCreateGroupChat={this.handleCreateGroupChat}\n        />\n      </div>\n    );\n  }\n}\n\nexport default CreateChatDialog;\n","import React from \"react\";\nimport './../../common.css'\nimport './style.css'\nimport ZIMKiti18n from '../../../../../plugin/i18n';\nconst i18n = ZIMKiti18n.getInstance().getI18next() as any;\n\nclass RightClickDialog extends React.Component<any, any> {\n    constructor (props: any) {\n        super(props);\n        this.deleteConversation = this.deleteConversation.bind(this);\n        this.closeConversation = this.closeConversation.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick(event: MouseEvent) {\n        let flag = false;\n        try {\n            ((event as any).path as HTMLElement[]).forEach(path => {\n                if (path.className && path.className.includes(\"right-click-box\")) {\n                    flag = true;\n                    throw new Error(\"break\");\n                }\n            })\n        } catch (error) { }\n        if (!flag) {\n            this.closeConversation();\n        }\n    }\n    componentDidMount(): void {\n        window.addEventListener(\"click\", this.handleClick);\n    }\n    componentWillUnmount(): void {\n        window.removeEventListener(\"click\", this.handleClick)\n    }\n    deleteConversation() {\n        this.props.onDeleteConversation();\n    }\n    closeConversation() {\n        this.props.onCloseConversation();\n    }\n    render() {\n        return (<div className=\"right-click-box\" style={{ top: `${this.props.y}px`, left: `${this.props.x}px` }}>\n            <div className=\"item\" onClick={ this.deleteConversation }>{ i18n.t(\"conversation_close_chat_w\") }</div>\n        </div>)\n    }\n}\n\nexport default RightClickDialog;","import ZIMKiti18n from '../../../plugin/i18n';\nconst i18n = ZIMKiti18n.getInstance().getI18next();\nexport function dateFormat(date, time) {\n    if (date === 0)\n        return '--';\n    const newDate = new Date(date);\n    const today = new Date(new Date().toDateString());\n    const dayList = {\n        1: i18n.t('common_monday'),\n        2: i18n.t('common_tuesday'),\n        3: i18n.t('common_wednesday'),\n        4: i18n.t('common_thursday'),\n        5: i18n.t('common_friday'),\n        6: i18n.t('common_saturday'),\n        0: i18n.t('common_sunday')\n    };\n    const year = String(newDate.getFullYear());\n    let month = String(newDate.getMonth() + 1);\n    if (month.length < 1) {\n        month = `0${month}`;\n    }\n    let day = String(newDate.getDate());\n    if (day.length === 1) {\n        day = `0${day}`;\n    }\n    let hours = String(newDate.getHours());\n    if (hours.length === 1) {\n        hours = `0${hours}`;\n    }\n    let minutes = String(newDate.getMinutes());\n    if (minutes.length === 1) {\n        minutes = `0${minutes}`;\n    }\n    let seconds = String(newDate.getSeconds());\n    if (seconds.length === 1) {\n        seconds = `0${seconds}`;\n    }\n    let result;\n    if (newDate.getFullYear() !== today.getFullYear()) {\n        if (time) {\n            result = 'yyyy-MM-dd hh:mm'\n                .replace(/yyyy/g, year)\n                .replace(/MM/g, month)\n                .replace(/dd/g, day)\n                .replace(/hh/g, hours)\n                .replace(/mm/g, minutes);\n        }\n        else {\n            result = 'yyyy-MM-dd'\n                .replace(/yyyy/g, year)\n                .replace(/MM/g, month)\n                .replace(/dd/g, day);\n        }\n    }\n    else {\n        const lastWeek = today.getTime() - 518400000;\n        if (date < lastWeek) {\n            if (time) {\n                result = 'MM-dd hh:mm'\n                    .replace(/MM/g, month)\n                    .replace(/dd/g, day)\n                    .replace(/hh/g, hours)\n                    .replace(/mm/g, minutes);\n            }\n            else {\n                result = 'MM-dd'.replace(/MM/g, month).replace(/dd/g, day);\n            }\n        }\n        else {\n            const beforeYesterday = today.getTime() - 86400000;\n            if (date < beforeYesterday) {\n                if (time) {\n                    result =\n                        dayList[newDate.getDay()] +\n                            ' ' +\n                            'hh:mm'.replace(/hh/g, hours).replace(/mm/g, minutes);\n                }\n                else {\n                    result = dayList[newDate.getDay()];\n                }\n            }\n            else {\n                if (date < today.getTime()) {\n                    if (time) {\n                        result =\n                            `${i18n.t('common_yesterday')} ` +\n                                'hh:mm'.replace(/hh/g, hours).replace(/mm/g, minutes);\n                    }\n                    else {\n                        result = i18n.t('common_yesterday');\n                    }\n                }\n                else {\n                    result = 'hh:mm'.replace(/hh/g, hours).replace(/mm/g, minutes);\n                }\n            }\n        }\n    }\n    return result;\n}\n","import { EventEmitter } from 'events';\nconst eventEmit = new EventEmitter();\nexport var EmitName;\n(function (EmitName) {\n    EmitName[\"ToastOperation\"] = \"toastOperation\";\n    EmitName[\"DialogOperation\"] = \"dialogOperation\";\n    EmitName[\"GroupInfoOperation\"] = \"groupInfoOperation\";\n})(EmitName || (EmitName = {}));\nexport const groupInfoOperation = (showGroupInfo) => {\n    eventEmit.emit(EmitName.GroupInfoOperation, showGroupInfo);\n};\nexport const toastOperation = (showToast, toastData) => {\n    eventEmit.emit(EmitName.ToastOperation, showToast, toastData);\n};\nexport const dialogOperation = (showBaseDialog, dialogData) => {\n    eventEmit.emit(EmitName.DialogOperation, showBaseDialog, dialogData);\n};\nexport default eventEmit;\n","export default class ZIMKitMessageModel {\n    constructor(message) {\n        this.type = message.type;\n        this.messageID = message.messageID;\n        this.timestamp = message.timestamp;\n        this.message = message.message;\n        this.senderUserID = message.senderUserID;\n        this.conversationID = message.conversationID;\n        this.conversationType = message.conversationType;\n        this.direction = message.direction;\n        this.sentStatus = message.sentStatus;\n        this.orderKey = message.orderKey;\n        this.conversationSeq = message.conversationSeq;\n    }\n}\nexport var ZIMKitMessageType;\n(function (ZIMKitMessageType) {\n    ZIMKitMessageType[ZIMKitMessageType[\"Tip\"] = 99] = \"Tip\";\n})(ZIMKitMessageType || (ZIMKitMessageType = {}));\n","import React from 'react';\nimport ZIMKitManager from '../../ZIMKitCommon/VM/ZIMKitManager';\nimport ZIMKitConversationVM from '../VM/ZIMKitConversation';\nimport ZIMKitGroupVM from '../../ZIMKitGroup/VM/ZIMKitGroupVM';\nimport CreateChatDialog from '../../ZIMKitCommon/UI/components/CreateChatDialog';\nimport RightClickDialog from '../../ZIMKitCommon/UI/components/RightClickDialog';\nimport './style.css';\nimport ZIMKitConversationModel from '../Model';\nimport { dateFormat } from '../../ZIMKitCommon/ToolUtil/dateFormat';\nimport { ZIMError, ZIMGroupCreatedResult } from '../../ZIMAdapter/index.entity';\nimport {\n  dialogOperation,\n  toastOperation\n} from '../../ZIMKitCommon/ToolUtil/eventBus';\nimport ZIMKiti18n from '../../../plugin/i18n';\nconst i18n = ZIMKiti18n.getInstance().getI18next() as any;\n\ninterface RightClickData {\n  showRightClickDialog: boolean;\n  x: number;\n  y: number;\n  conversationItem: ZIMKitConversationModel;\n}\n\nclass ConversationItem extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.switchConversation = this.switchConversation.bind(this);\n    this.operationConversation = this.operationConversation.bind(this);\n  }\n  switchConversation() {\n    const { conversation } = this.props;\n    ZIMKitConversationVM.getInstance().setCurrentConversation(\n      conversation.conversationID\n    );\n    ZIMKitConversationVM.getInstance().clearConversationUnreadMessageCount(\n      conversation.conversationID,\n      conversation.type\n    );\n  }\n  operationConversation(event: any) {\n    event.preventDefault();\n\n    const con = document.querySelector(\n      '.zego-im-container .box'\n    ) as HTMLElement;\n    this.props.onRightClick({\n      showRightClickDialog: true,\n      x: event.clientX - con.offsetLeft,\n      y: event.clientY - con.offsetTop,\n      conversationItem: this.props.conversation\n    });\n  }\n  nameFormat(item: ZIMKitConversationModel) {\n    return (item.conversationName || item.conversationID)\n      .slice(0, 1)\n      .toLowerCase();\n  }\n  render() {\n    let unreadCountView: any = null;\n    const conversation = this.props.conversation;\n    const currentConversation = this.props.currentConversation;\n    if (conversation.unreadMessageCount) {\n      unreadCountView = (\n        <div className=\"unread-count\">\n          {conversation.unreadMessageCount > 99\n            ? '99+'\n            : conversation.unreadMessageCount}\n        </div>\n      );\n    }\n    return (\n      <div\n        className={\n          'conversation-item' +\n          (currentConversation &&\n          conversation.conversationID === currentConversation.conversationID\n            ? ' actived'\n            : '')\n        }\n        onClick={this.switchConversation}\n        onContextMenu={this.operationConversation}>\n        <div className=\"head-portrait\">\n          {conversation.type === 0 ? this.nameFormat(conversation) : 'G'}\n          {unreadCountView}\n        </div>\n        <div className=\"conversation-info\">\n          <div className=\"info-top\">\n            <div className=\"item-name\">\n              {conversation.conversationName || conversation.conversationID}\n            </div>\n            {conversation.lastMessage ? (\n              <div className=\"item-date\">\n                {dateFormat(conversation.lastMessage.timestamp, false)}\n              </div>\n            ) : null}\n          </div>\n          {conversation.lastMessage ? (\n            <div className=\"item-message\">\n              {conversation.lastMessage.sentStatus === 2 ? (\n                <div className=\"err-icon\"></div>\n              ) : null}\n              <div className=\"message-text\">\n                {conversation.lastMessage.message}\n              </div>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass ConversationList extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      isAbnormal: false,\n      totalUnreadMessageCount: 0,\n      conversationList: [],\n      showCreateChatDialog: false,\n      showRightClickDialog: false,\n      x: 0,\n      y: 0,\n      conversationItem: null, // Right click conversation\n      currentConversation: null\n    };\n    this.logout = this.logout.bind(this);\n    this.listScroll = this.listScroll.bind(this);\n    this.triggerDialog = this.triggerDialog.bind(this);\n    this.handleRightClick = this.handleRightClick.bind(this);\n    this.handleCloseDialog = this.handleCloseDialog.bind(this);\n    this.handleCreatePeerChat = this.handleCreatePeerChat.bind(this);\n    this.handleCreateGroupChat = this.handleCreateGroupChat.bind(this);\n    this.handleJoinGroup = this.handleJoinGroup.bind(this);\n    this.handleDeleteConversation = this.handleDeleteConversation.bind(this);\n    this.handleCloseConversation = this.handleCloseConversation.bind(this);\n  }\n  componentDidMount() {\n    if (ZIMKitManager.getInstance().isLoggedIn) {\n      ZIMKitConversationVM.getInstance().loadConversationList();\n    }\n    ZIMKitConversationVM.getInstance().registerIsLoggedInCallback(\n      () => {\n        ZIMKitConversationVM.getInstance().loadConversationList();\n      }\n    );\n    ZIMKitConversationVM.getInstance().registerCvTotalUnreadMessageCountUpdatedCallback(\n      data => {\n        this.setState({\n          totalUnreadMessageCount: data.totalUnreadMessageCount\n        });\n      }\n    );\n    ZIMKitConversationVM.getInstance().registerCvListUpdatedCallback(\n      conversationList => {\n        this.setState({ conversationList });\n      }\n    );\n    ZIMKitConversationVM.getInstance().registerCurrentCvUpdatedCallback(\n      currentConversation => {\n        this.setState({ currentConversation });\n      }\n    );\n    ZIMKitConversationVM.getInstance().registerAbnormalCallback(isAbnormal => {\n      this.setState({ isAbnormal });\n    });\n  }\n  componentWillUnmount(): void {\n    ZIMKitConversationVM.getInstance().unInit();\n  }\n  listScroll() {\n    const msgElement = document.querySelector(\n      '.conversation-content'\n    ) as HTMLDivElement;\n    const scrollTop = Math.round(msgElement.scrollTop);\n    const scrollHeight = msgElement.scrollHeight;\n    const clientHeight = msgElement.clientHeight;\n    if (scrollTop >= scrollHeight - clientHeight) {\n      ZIMKitConversationVM.getInstance().loadNextPage();\n    }\n    if (scrollTop == 0) {\n      // todo reload\n    }\n  }\n  triggerDialog(show: boolean) {\n    this.setState({ showCreateChatDialog: show });\n  }\n  handleRightClick(data: RightClickData) {\n    this.setState(data);\n  }\n  handleCloseDialog() {\n    this.triggerDialog(false);\n  }\n  handleCreatePeerChat(toUserID: string) {\n    const conversationItem = (this.state.conversationList as ZIMKitConversationModel[]).filter(\n      item => item.conversationID === toUserID\n    )[0];\n    if (conversationItem) {\n      ZIMKitConversationVM.getInstance().setCurrentConversation(\n        conversationItem.conversationID\n      );\n    } else {\n      ZIMKitConversationVM.getInstance().setTempConversation({\n        conversationID: toUserID,\n        conversationName: toUserID,\n        type: 0\n      } as ZIMKitConversationModel);\n    }\n    this.triggerDialog(false);\n  }\n  handleCreateGroupChat(groupName: string, userIDList: string) {\n    const userIDListArr = userIDList.split(';').filter(userID => userID);\n    ZIMKitGroupVM.getInstance()\n      .createGroup('', groupName, userIDListArr)\n      .then((data: ZIMGroupCreatedResult) => {\n        const { groupInfo, errorUserList } = data;\n        const { baseInfo } = groupInfo;\n        if (errorUserList.length) {\n          const errorUserIDList = errorUserList\n            .map(item => item.userID)\n            .join(' ');\n          dialogOperation(true, {\n            desc: `${i18n\n              .t('message_user_not_exit_please_again')\n              .replace('%s', errorUserIDList)}`,\n            cancelText: i18n.t('common_return'),\n            hasCloseBtn: false\n          });\n          return;\n        } else {\n          this.setState({ showCreateChatDialog: false });\n          ZIMKitConversationVM.getInstance().setTempConversation({\n            conversationID: baseInfo.groupID,\n            conversationName: baseInfo.groupName,\n            type: 2\n          } as ZIMKitConversationModel);\n        }\n      })\n      .catch(() => {\n        this.setState({ showCreateChatDialog: false });\n      });\n  }\n  handleJoinGroup(groupID: string) {\n    ZIMKitGroupVM.getInstance()\n      .joinGroup(groupID)\n      .then(data => {\n        const { groupInfo } = data;\n        const { baseInfo } = groupInfo;\n        this.setState({ showCreateChatDialog: false });\n        ZIMKitConversationVM.getInstance().setTempConversation({\n          conversationID: baseInfo.groupID,\n          conversationName: baseInfo.groupName,\n          type: 2\n        } as ZIMKitConversationModel);\n      })\n      .catch((error: ZIMError) => {\n        switch (error.code) {\n          case 6000523:\n            dialogOperation(true, {\n              desc: `${i18n\n                .t('group_group_id_not_exit')\n                .replace('%s', groupID)}`,\n              cancelText: i18n.t('common_return'),\n              hasCloseBtn: false\n            });\n            break;\n          default:\n            toastOperation(true, {\n              text: error.message,\n              type: 'default'\n            });\n            break;\n        }\n      });\n  }\n  handleDeleteConversation() {\n    // Delete conversation\n    const { conversationID, type } = this.state.conversationItem;\n    ZIMKitConversationVM.getInstance()\n      .deleteConversation(conversationID, type)\n      .then(() => {})\n      .finally(() => {\n        // Close right click dialog\n        this.setState({\n          showRightClickDialog: false\n        });\n      });\n  }\n  handleCloseConversation() {\n    this.setState({\n      showRightClickDialog: false\n    });\n  }\n  logout() {\n    ZIMKitManager.getInstance().logout();\n  }\n  render() {\n    let totalView: any = null,\n      createChatDialogView: any = null,\n      rightClickDialogView: any = null;\n    let conversationListView = null;\n    if (this.state.totalUnreadMessageCount) {\n      totalView = (\n        <div className=\"total\">\n          {this.state.totalUnreadMessageCount > 99\n            ? '99+'\n            : this.state.totalUnreadMessageCount}\n        </div>\n      );\n    }\n    if (this.state.showCreateChatDialog) {\n      createChatDialogView = (\n        <CreateChatDialog\n          onCloseDialog={this.handleCloseDialog}\n          onCreatePeerChat={this.handleCreatePeerChat}\n          onCreateGroupChat={this.handleCreateGroupChat}\n          onJoinGroup={this.handleJoinGroup}\n        />\n      );\n    }\n    if (this.state.showRightClickDialog) {\n      rightClickDialogView = (\n        <RightClickDialog\n          x={this.state.x}\n          y={this.state.y}\n          onDeleteConversation={this.handleDeleteConversation}\n          onCloseConversation={this.handleCloseConversation}\n        />\n      );\n    }\n    if (this.state.conversationList && this.state.conversationList.length) {\n      conversationListView = this.state.conversationList.map(\n        (element: ZIMKitConversationModel, index: number) => (\n          <ConversationItem\n            key={element.conversationID + index}\n            conversation={element}\n            currentConversation={this.state.currentConversation}\n            onRightClick={this.handleRightClick}\n          />\n        )\n      );\n    }\n    return (\n      <div className=\"conversation\">\n        <div className=\"left-banner\">\n          <div className=\"top\">\n            <div className=\"item\">\n              <div className=\"icon message-icon\"></div>\n              <div className=\"text\">\n                {i18n.t('conversation_message_total_count')}\n              </div>\n              {totalView}\n            </div>\n            <div className=\"item\" onClick={this.triggerDialog.bind(this, true)}>\n              <div className=\"icon create-chat-icon\"></div>\n              <div className=\"text create-chat-text\">\n                {i18n.t('conversation_start_chat_w')}\n              </div>\n            </div>\n          </div>\n          <div className=\"item\" onClick={this.logout}>\n            <div className=\"icon exit-icon\"></div>\n            <div className=\"text exit-text\">{i18n.t('common_logout')}</div>\n          </div>\n        </div>\n        {!this.state.isAbnormal ? (\n          this.state.conversationList.length ? (\n            <div className=\"conversation-content\" onScroll={this.listScroll}>\n              {conversationListView}\n            </div>\n          ) : (\n            <div className=\"default-content\">\n              <div className=\"text\">{i18n.t('conversation_empty')}</div>\n            </div>\n          )\n        ) : (\n          <div className=\"abnormal-content\">\n            <div\n              className=\"btn reload-btn\"\n              onClick={ZIMKitConversationVM.getInstance().loadConversationList.bind(\n                ZIMKitConversationVM.getInstance()\n              )}>\n              {i18n.t('conversation_reload')}\n            </div>\n          </div>\n        )}\n        {createChatDialogView}\n        {rightClickDialogView}\n      </div>\n    );\n  }\n}\n\nexport default ConversationList;\n","import { EventName } from \"../../ZIMKitCommon/Constant/event\";\nimport ZIMKitEventHandler from \"../../ZIMKitCommon/VM/ZIMKitEventHandler\";\nimport ZIMKitManager from \"../../ZIMKitCommon/VM/ZIMKitManager\";\nimport ZIMKitMessageModel from \"../Model\";\nimport ZIMKiti18n from \"../../../plugin/i18n\";\nconst i18n = ZIMKiti18n.getInstance().getI18next();\nexport default class ZIMKitMessageVM {\n    constructor() {\n        this.eventHandler = ZIMKitEventHandler.getInstance();\n        this.messageCount = 30;\n        this.messageIndex = 31;\n        this.currentChat = {};\n        this.currentMessageList = [];\n        if (!ZIMKitMessageVM.instance) {\n            ZIMKitMessageVM.instance = this;\n            ZIMKitMessageVM.instance.initListenerHandle();\n        }\n        return ZIMKitMessageVM.instance;\n    }\n    static getInstance() {\n        if (!ZIMKitMessageVM.instance) {\n            ZIMKitMessageVM.instance = new ZIMKitMessageVM();\n        }\n        return ZIMKitMessageVM.instance;\n    }\n    initListenerHandle() {\n        this.eventHandler.addEventListener(EventName.zimReceivePeerMessage, [\n            (data) => {\n                if (this.currentChat.conversationID === data.fromConversationID) {\n                    data.messageList.forEach((item) => {\n                        this.currentMessageList.push(new ZIMKitMessageModel(item));\n                    });\n                    this.eventHandler.actionListener(EventName.zimKitCurrentMessageListUpdated, this.currentMessageList);\n                    this.eventHandler.actionListener(EventName.zimKitCurrentChatUpdated, this.currentChat);\n                }\n            },\n        ]);\n        this.eventHandler.addEventListener(EventName.zimReceiveGroupMessage, [\n            (data) => {\n                if (this.currentChat.conversationID === data.fromConversationID) {\n                    data.messageList.forEach((item) => {\n                        this.currentMessageList.push(new ZIMKitMessageModel(item));\n                    });\n                    this.eventHandler.actionListener(EventName.zimKitCurrentMessageListUpdated, this.currentMessageList);\n                    this.eventHandler.actionListener(EventName.zimKitCurrentChatUpdated, this.currentChat);\n                }\n            },\n        ]);\n        this.eventHandler.addEventListener(EventName.zimKitDeleteConversation, [\n            (conversationID) => {\n                if (conversationID === this.currentChat.conversationID) {\n                    this.currentMessageList = [];\n                    this.currentChat = {};\n                    this.eventHandler.actionListener(EventName.zimKitCurrentMessageListUpdated, this.currentMessageList);\n                    this.eventHandler.actionListener(EventName.zimKitCurrentChatUpdated, this.currentChat);\n                }\n            },\n        ]);\n        this.eventHandler.addEventListener(EventName.zimKitCurrentConversationUpdate, [\n            (conversation) => {\n                if (!conversation ||\n                    (this.currentChat.conversationID &&\n                        conversation.conversationID === this.currentChat.conversationID))\n                    return;\n                this.currentChat = conversation;\n                this.messageCount = 30;\n                this.currentMessageList.length = 0;\n                this.queryHistoryMessage(this.currentChat.conversationID, this.currentChat.type);\n                this.eventHandler.actionListener(EventName.zimKitCurrentChatUpdated, this.currentChat);\n            },\n        ]);\n    }\n    queryHistoryMessage(conversationID, conversationType) {\n        const config = {\n            nextMessage: undefined,\n            count: this.messageCount,\n            reverse: true,\n        };\n        return ZIMKitManager.getInstance()\n            .zim.queryHistoryMessage(conversationID, conversationType, config)\n            .then((data) => {\n            this.currentMessageList = [];\n            if (data.messageList.length) {\n                data.messageList.forEach((item) => {\n                    this.currentMessageList.push(new ZIMKitMessageModel(item));\n                });\n            }\n            this.eventHandler.actionListener(EventName.zimKitCurrentMessageListUpdated, this.currentMessageList);\n        });\n    }\n    clearCurrentMessageList() {\n        this.currentMessageList = [];\n        this.eventHandler.actionListener(EventName.zimKitCurrentMessageListUpdated, this.currentMessageList);\n    }\n    sendPeerMessage(message) {\n        const config = { priority: 1 };\n        return ZIMKitManager.getInstance()\n            .zim.sendPeerMessage(message, this.currentChat.conversationID, config)\n            .then((res) => {\n            this.currentMessageList.push(new ZIMKitMessageModel(res.message));\n        })\n            .catch((error) => {\n            const msg = {\n                type: 1,\n                messageID: String(new Date().getTime()),\n                message: message.message,\n                timestamp: new Date().getTime(),\n                senderUserID: ZIMKitManager.getInstance().userInfo.userID,\n                conversationID: \"\",\n                conversationType: 0,\n                direction: 0,\n                sentStatus: 2,\n                orderKey: 0,\n                conversationSeq: 0,\n            };\n            this.currentMessageList.push(new ZIMKitMessageModel(msg));\n            switch (error.code) {\n                case 6000204:\n                    const tipMsg = {\n                        type: 99,\n                        messageID: String(new Date().getTime()),\n                        message: `${i18n\n                            .t(\"message_user_not_exit_please_again\")\n                            .replace(\"%s\", this.currentChat.conversationID)}`,\n                        timestamp: new Date().getTime(),\n                        senderUserID: ZIMKitManager.getInstance().userInfo.userID,\n                        conversationID: \"\",\n                        conversationType: 0,\n                        direction: 0,\n                        sentStatus: 2,\n                        orderKey: 0,\n                        conversationSeq: 0,\n                    };\n                    this.currentMessageList.push(new ZIMKitMessageModel(tipMsg));\n                    break;\n                default:\n                    break;\n            }\n        })\n            .finally(() => {\n            this.eventHandler.actionListener(EventName.zimKitCurrentChatUpdated, this.currentChat);\n            this.eventHandler.actionListener(EventName.zimKitCurrentMessageListUpdated, this.currentMessageList);\n        });\n    }\n    sendGroupMessage(message) {\n        const config = { priority: 1 };\n        return ZIMKitManager.getInstance()\n            .zim.sendGroupMessage(message, this.currentChat.conversationID, config)\n            .then((res) => {\n            this.currentMessageList.push(new ZIMKitMessageModel(res.message));\n        })\n            .catch(() => {\n            const msg = {\n                type: 1,\n                messageID: String(new Date().getTime()),\n                message: message.message,\n                timestamp: new Date().getTime(),\n                senderUserID: ZIMKitManager.getInstance().userInfo.userID,\n                conversationID: \"\",\n                conversationType: 0,\n                direction: 0,\n                sentStatus: 2,\n                orderKey: 0,\n                conversationSeq: 0,\n            };\n            this.currentMessageList.push(new ZIMKitMessageModel(msg));\n        })\n            .finally(() => {\n            this.eventHandler.actionListener(EventName.zimKitCurrentChatUpdated, this.currentChat);\n            this.eventHandler.actionListener(EventName.zimKitCurrentMessageListUpdated, this.currentMessageList);\n        });\n    }\n    unInit() {\n        this.currentChat = {};\n        this.currentMessageList.length = 0;\n    }\n    registerLoginUserUpdatedCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimKitLoginUserUpdate, [\n            callback,\n        ]);\n    }\n    registerCurrentChatUpdatedCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimKitCurrentChatUpdated, [\n            callback,\n        ]);\n    }\n    registerMessageListUpdatedCallback(callback) {\n        this.eventHandler.addEventListener(EventName.zimKitCurrentMessageListUpdated, [callback]);\n    }\n}\n","import React, { FormEvent } from \"react\";\nimport ZIMKitMessageVM from \"../VM/ZIMKitMessageVM\";\nimport { dateFormat } from \"../../ZIMKitCommon/ToolUtil/dateFormat\";\nimport ZIMKitMessageModel from \"../Model\";\nimport ZIMKitGroupVM from \"../../ZIMKitGroup/VM/ZIMKitGroupVM\";\nimport { ZIMMessage } from \"../../ZIMAdapter/index.entity\";\nimport \"../../ZIMKitCommon/UI/common.css\"\nimport \"./style.css\"\nimport { groupInfoOperation } from \"../../ZIMKitCommon/ToolUtil/eventBus\";\nimport ZIMKiti18n from '../../../plugin/i18n';\nimport ZIMKitManager from \"../../ZIMKitCommon/VM/ZIMKitManager\";\nconst i18n = ZIMKiti18n.getInstance().getI18next() as any;\n\nclass MessageView extends React.Component<any, any> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            currentChat: null,\n            currentMessageList: [],\n            message: \"\",\n            oldScrollHeight: 0,\n            newScrollHeight: 0,\n            userInfo: {}\n        }\n        this.listScroll = this.listScroll.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n        this.dateFormat = this.dateFormat.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.getGroupUserName = this.getGroupUserName.bind(this);\n        this.scrollToBottom = this.scrollToBottom.bind(this);\n        this.triggerGroupInfo = this.triggerGroupInfo.bind(this);\n    }\n    componentDidMount() {\n        ZIMKitMessageVM.getInstance().registerLoginUserUpdatedCallback(userInfo => {\n            this.setState({ userInfo });\n        })\n        ZIMKitMessageVM.getInstance().registerCurrentChatUpdatedCallback(currentChat => {\n            this.setState({ currentChat, message: \"\" }, () => {\n                // Auto focus\n                const messageInput = document.querySelector('.text-area');\n                // @ts-ignore\n                messageInput && (messageInput.focus());\n            });\n        });\n        ZIMKitMessageVM.getInstance().registerMessageListUpdatedCallback(currentMessageList => {\n            this.setState({ currentMessageList }, () => {\n                this.scrollToBottom();\n            });\n        });\n    }\n    componentWillUnmount(): void {\n        ZIMKitMessageVM.getInstance().unInit();\n    }\n    scrollToBottom() {\n        const msgElement = document.querySelector(\".message-content\") as HTMLDivElement;\n        if (msgElement) {\n            const scrollTop = Number(msgElement.scrollHeight) - Number(msgElement.clientHeight);\n            msgElement.scrollTop = scrollTop;\n        }\n    }\n    listScroll() {\n        const msgElement = document.querySelector(\".message-content\") as HTMLDivElement;\n        if (msgElement) {\n            const scrollTop = Math.round(msgElement.scrollTop);\n            const scrollHeight = msgElement.scrollHeight;\n            const { currentMessageList, currentChat } = this.state;\n            if (scrollTop == 0) {\n                if (ZIMKitMessageVM.getInstance().messageCount <= currentMessageList.length) {\n                    ZIMKitMessageVM.getInstance().messageCount = currentMessageList.length + 30;\n                    ZIMKitMessageVM.getInstance().queryHistoryMessage(currentChat.conversationID, currentChat.type).then(() => {\n                        this.setState({\n                            oldScrollHeight: scrollHeight,\n                        }, () => {\n                            this.setState({\n                                newScrollHeight: msgElement.scrollHeight,\n                            }, () => {\n                                msgElement.scrollTop = this.state.newScrollHeight - this.state.oldScrollHeight;\n                            });\n                        });\n                    })\n                }\n            }\n        }\n    }\n    sendMessage() {\n        const messageObj = {\n            type: 1,\n            message: this.state.message,\n        } as ZIMMessage;\n        if (this.state.currentChat.type === 2) {\n            ZIMKitMessageVM.getInstance().sendGroupMessage(messageObj);\n        } else {\n            ZIMKitMessageVM.getInstance().sendPeerMessage(messageObj);\n        }\n        this.setState({ message: \"\" });\n    }\n    getGroupUserName(userID: string) {\n        const memberList = ZIMKitGroupVM.getInstance().memberList;\n        let groupIDUserName = userID;\n        if (memberList.length) {\n            const member = memberList.filter((item) => item.userID === userID)[0];\n            groupIDUserName =  member ? member.userName : userID;\n        }\n        return groupIDUserName;\n    }\n    dateFormat(currentMessage: ZIMKitMessageModel, currentIndex: number) {\n        if (currentIndex === 0) {\n            return dateFormat(currentMessage.timestamp, true);\n        } else {\n            const previousMessage = this.state.currentMessageList[currentIndex - 1];\n            if (previousMessage && currentMessage.timestamp - previousMessage.timestamp > 300000) {\n                return dateFormat(currentMessage.timestamp, true);\n            }\n        }\n    }\n    handleInputChange(event: FormEvent) {\n        this.setState({\n            message: (event.target as HTMLTextAreaElement).value\n        });\n    }\n    triggerGroupInfo() {\n        groupInfoOperation(true);\n    }\n    render() {\n        const { currentChat, currentMessageList } = this.state;\n        const { userID, userName } = ZIMKitManager.getInstance().userInfo;\n        let chatContentView: any = null;\n        if (!currentChat || !currentChat.conversationID) {\n            chatContentView = (<div className=\"default-content\">\n                <div className=\"img\"></div>\n                <div className=\"text\">{ i18n.t(\"message_empty_w\") }</div>\n            </div>);\n        } else {\n            const { conversationName, conversationID, type } = currentChat;\n            chatContentView = (\n                <React.Fragment>\n                    <div className=\"header\">\n                        <div className=\"title\">{ conversationName || conversationID }</div>\n                        { type === 2 ? <div className=\"more-icon\" onClick={ this.triggerGroupInfo }></div> : null }\n                    </div>\n                    <div className=\"message-content\" onScroll={ this.listScroll }>\n                        {\n                            (currentMessageList as ZIMKitMessageModel[]).map((item, index) => {\n                                const time = this.dateFormat(item, index);\n                                const isReceive = item.conversationType === 2 ? item.senderUserID !== userID : item.senderUserID !== userID;\n                                const isError = item.type === 99;\n                                const groupUserName = this.getGroupUserName(item.senderUserID);\n                                return <div className=\"message-item\" key={ item.messageID + index }>\n                                    {\n                                        time ? <div className=\"time-box\">{ time }</div> : null\n                                    }\n                                    {\n                                        isReceive ? <div className=\"left-msg\">\n                                            <div className=\"head-portrait\">\n                                                { item.conversationType === 2 ? groupUserName.substr(0, 1).toLowerCase() : (conversationName ? conversationName.substr(0, 1).toLowerCase() : \"\") }\n                                            </div>\n                                            <div className=\"message-box\">\n                                                { item.conversationType === 2 ? <div className=\"send-name\">{ groupUserName }</div> : null }\n                                                <div className=\"msg-text\">{ item.message }</div>\n                                            </div>\n                                        </div> : null\n                                    }\n                                    {\n                                        isError ? <div className=\"center-msg\">{ item.message }</div> : null\n                                    }\n                                    {\n                                        !isReceive && !isError ? <div className=\"right-msg\">\n                                            { item.type !== 99 && item.sentStatus === 2 ? <div className=\"err-icon\"></div> : null }\n                                            <div className=\"message-box\">\n                                                {/* { item.conversationType === 2 ? <div className=\"send-name\">{ userName }</div> : null } */}\n                                                <div className=\"msg-text\">{ item.message }</div>\n                                            </div>\n                                            <div className=\"head-portrait\">{ userName.substr(0, 1).toLowerCase() }</div>\n                                        </div> : null\n                                    }\n                                </div>\n                            })\n                        }\n                    </div>\n                    <div className=\"send-box\">\n                        <div className=\"tool-box\"></div>\n                        <textarea className=\"text-area\" value={this.state.message} onInput={ this.handleInputChange }></textarea>\n                        <button className=\"btn send-button\" onClick={ this.sendMessage } disabled={ !this.state.message }>{ i18n.t(\"message_send_w\") }</button>\n                    </div>\n                </React.Fragment>\n            );\n        }\n        return (<div className=\"chat\">{ chatContentView }</div>);\n    }\n}\n\nexport default MessageView;","import React from \"react\";\nimport { groupInfoOperation, toastOperation } from \"../../ZIMKitCommon/ToolUtil/eventBus\";\nimport ZIMKitGroupVM from \"../VM/ZIMKitGroupVM\";\nimport \"./style.css\";\nimport ZIMKiti18n from '../../../plugin/i18n';\nconst i18n = ZIMKiti18n.getInstance().getI18next() as any;\n\nclass GroupInfoView extends React.Component<any, any> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            currentGroupInfo: null\n        };\n        this.copy = this.copy.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick(event: MouseEvent) {\n        if ((event.target as HTMLElement).className.includes(\"more-icon\")) return;\n        let flag = false;\n        try {\n            ((event as any).path as HTMLElement[]).forEach(path => {\n                if (path.className && path.className.includes(\"group-container\")) {\n                    flag = true;\n                    throw new Error(\"break\");\n                }\n            })\n        } catch (error) { }\n        if (!flag) {\n            groupInfoOperation(false);\n        }\n    }\n    componentDidMount(): void {\n        window.addEventListener(\"click\", this.handleClick);\n        ZIMKitGroupVM.getInstance().registerCurrentGroupInfoUpdateCallback(currentGroupInfo => {\n            this.setState({ currentGroupInfo });\n        });\n    }\n    componentWillUnmount(): void {\n        window.removeEventListener(\"click\", this.handleClick)\n        ZIMKitGroupVM.getInstance().unInit();\n    }\n    copy() {\n        const currentGroupInfo = this.state.currentGroupInfo;\n        navigator.clipboard && currentGroupInfo && navigator.clipboard.writeText(currentGroupInfo.baseInfo.groupID).then(() => {\n            toastOperation(true, {\n                text: i18n.t(\"group_copy_success\"),\n                type: \"default\",\n            });\n        });\n    }\n    render() {\n        const currentGroupInfo = this.state.currentGroupInfo;\n        let groupInfoView = null;\n        if (this.props.showGroupInfo) {\n            // @ts-ignore\n            groupInfoView = <div className=\"group-container\">\n                <div className=\"form-box\">\n                    <div className=\"id\">\n                        <div className=\"label\">{ i18n.t(\"group_group_id\") }</div>\n                        <div className=\"value\">{ currentGroupInfo ? currentGroupInfo.baseInfo.groupID : \"\" }</div>\n                    </div>\n                    <div className=\"btn copy-btn\" onClick={ this.copy }>{ i18n.t(\"group_copy\") }</div>\n                </div>\n            </div>\n        }\n        return groupInfoView;\n    }\n}\n\nexport default GroupInfoView;","import React from 'react';\nimport './style.css';\nimport eventBus, { EmitName } from \"../../../ToolUtil/eventBus\";\n\nclass Toast extends React.Component<any, any> {\n    toastTimer: any;\n    duration = 2000;\n    constructor(props: any) {\n        super(props);\n    }\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        if (this.props.showToast) {\n            clearTimeout(this.toastTimer);\n            this.toastTimer = setTimeout(() => {\n                eventBus.emit(EmitName.ToastOperation, false);\n            }, this.duration);\n        }\n    }\n    componentWillUnmount(): void {\n        clearTimeout(this.toastTimer);\n        this.toastTimer = null;\n    }\n    render() {\n        let toastView = null;\n        if (this.props.showToast) {\n            const { name, text, type } = this.props.toastData;\n            // @ts-ignore\n            toastView = <div>\n                <div className={ \"default\" + (type === \"loading\" ? \" loading\" : \"\") }>\n                    <div className={ \"toast\" + (type === \"error\" ? \" error\" : \"\" )}>\n                        { name ? <span className=\"name\">{ name }</span> : null}\n                        <span className=\"text\">{ text }</span>\n                    </div>\n                </div>\n            </div>\n        }\n        return toastView;\n    }\n}\n\nexport default Toast;","import React from 'react';\nimport './style.css';\nimport eventBus, { EmitName } from \"../../../ToolUtil/eventBus\";\n\nclass BaseDialog extends React.Component<any, any> {\n    constructor(props: any) {\n        super(props);\n        this.closeHandle = this.closeHandle.bind(this);\n        this.cancelHandle = this.cancelHandle.bind(this);\n        this.confirmHandle = this.confirmHandle.bind(this);\n    }\n    closeHandle() {\n        eventBus.emit(EmitName.DialogOperation, false);\n    }\n    cancelHandle() {\n        const { cancelFunc } = this.props.dialogData;\n        cancelFunc && cancelFunc();\n        this.closeHandle();\n    }\n    confirmHandle() {\n        const { confirmFunc } = this.props.dialogData;\n        confirmFunc && confirmFunc();\n        this.closeHandle();\n    }\n    render() {\n        let dialogView = null;\n        if (this.props.showBaseDialog) {\n            const { title, desc, hasCloseBtn, cancelText, confirmText } = this.props.dialogData;\n            dialogView = <div className=\"wrapper\">\n                <div className=\"dialog\">\n                    {\n                        hasCloseBtn ? <div className=\"close-icon\" onClick={ this.closeHandle }></div> : null\n                    }\n                    <div className=\"title\">{ title }</div>\n                    <div className=\"desc\">{ desc }</div>\n                    <div className=\"line\"></div>\n                    <div className=\"btn-box\">\n                        {\n                            cancelText ? <button className=\"btn cancel\" onClick={ this.cancelHandle }>{ cancelText }</button> : null\n                        }\n                        {\n                            confirmText ? <button className=\"btn confirm\" onClick={ this.confirmHandle }>{ confirmText }</button> : null\n                        }\n                    </div>\n                </div>\n            </div>\n        }\n        return dialogView;\n    }\n}\n\nexport default BaseDialog;","import React from \"react\";\nimport ConversationList from \"../../ZIMKitConversation/UI\";\nimport MessageView from \"../../ZIMKitMessage/UI\";\nimport GroupInfoView from \"../../ZIMKitGroup/UI\";\nimport Toast from \"../../ZIMKitCommon/UI/components/Toast\";\nimport BaseDialog from \"../../ZIMKitCommon/UI/components/BaseDialog\";\nimport eventBus, { EmitName } from \"../../ZIMKitCommon/ToolUtil/eventBus\";\nimport './style.css';\n\nclass Common extends React.Component<any, any> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            showGroupInfo: false,\n            showToast: false,\n            showBaseDialog: false,\n            toastData: {\n                text: \"\",\n                name: \"\",\n                type: \"default\"\n            },\n            dialogData: {\n                title: \"\",\n                desc: \"\",\n                cancelText: \"\",\n                confirmText: \"\",\n                hasCloseBtn: false\n            }\n        };\n        this.handleGroupInfoOperation = this.handleGroupInfoOperation.bind(this);\n        this.handleToastOperation = this.handleToastOperation.bind(this);\n        this.handleDialogOperation = this.handleDialogOperation.bind(this);\n    }\n    handleGroupInfoOperation(showGroupInfo: boolean) {\n        this.setState({ \n            showGroupInfo: showGroupInfo === undefined ? !this.state.showGroupInfo : !!showGroupInfo\n        });\n    }\n    handleToastOperation(showToast: boolean, toastData: any) {\n        this.setState({ showToast, toastData });\n    }\n    handleDialogOperation(showBaseDialog: boolean, dialogData: any) {\n        this.setState({ showBaseDialog, dialogData });\n    }\n    componentDidMount(): void {\n        eventBus.on(EmitName.GroupInfoOperation, this.handleGroupInfoOperation);\n        eventBus.on(EmitName.ToastOperation, this.handleToastOperation);\n        eventBus.on(EmitName.DialogOperation, this.handleDialogOperation);\n    }\n    componentWillUnmount(): void {\n        eventBus.off(EmitName.GroupInfoOperation, this.handleGroupInfoOperation);\n        eventBus.off(EmitName.ToastOperation, this.handleToastOperation);\n        eventBus.off(EmitName.DialogOperation, this.handleDialogOperation);\n    }\n    render() {\n        const { showGroupInfo, showToast, showBaseDialog, toastData, dialogData } = this.state;\n        return (<div id=\"zegoim\">\n            <div className=\"zego-im-container\">\n                <div className=\"top-banner\">{ navigator.language.includes('en') ? 'ZEGOCLOUD' : 'ZEGO' } In-app Chat</div>\n                <div className=\"box\">\n                    <ConversationList></ConversationList>\n                    <MessageView></MessageView>\n                    <GroupInfoView showGroupInfo={ showGroupInfo }></GroupInfoView>\n                </div>\n                <Toast showToast={ showToast } toastData={ toastData }></Toast>\n                <BaseDialog showBaseDialog={ showBaseDialog } dialogData={ dialogData }></BaseDialog>\n            </div>\n        </div>)\n    }\n}\n\nexport default Common;\n","import React from 'react';\nimport Common  from \"../../ZIMKit/src/components/ZIMKitCommon/UI\";\nimport { connect } from \"react-redux\";\nimport { logout, selectIsLoggedIn } from \"../../store/authSlice\";\nimport { Navigate } from 'react-router-dom';\nimport ZIMKitManager from '../../ZIMKit/src/components/ZIMKitCommon/VM/ZIMKitManager';\nimport { ZIMEventOfConnectionStateChangedResult } from '../../ZIMKit/src/components/ZIMAdapter/index.entity';\nimport { clearCacheUserInfo } from '../../util';\nimport './style.css'\n\nclass MainPage extends React.Component<any, any> {\n    componentDidMount(){\n        ZIMKitManager.getInstance().registerConnectionStateChangedCallback((data: ZIMEventOfConnectionStateChangedResult) => {\n            if (data.state === 0 && (data.event === 0 || data.event === 4)) {\n                this.props.logout();\n                clearCacheUserInfo();\n            }\n        });\n    }\n    render() {\n        return (<div id=\"main\">\n            {\n                !this.props.isLoggedIn && (<Navigate to='/login' replace={ true } />)\n            }\n            <Common></Common> \n        </div>);\n    }\n}\n\nconst mapDispatchToProps = (dispatch: (arg0: { payload: any; type: string; }) => any) => {\n    return {\n        logout: (content: any) => dispatch(logout(content))\n    };\n};\n  \nexport default connect(selectIsLoggedIn, mapDispatchToProps)(MainPage);","import React from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport LoginPage from \"../Login/index\";\nimport MainPage from \"../Main/index\";\nimport { initIMKitSDK, login, selectIsLoggedIn } from \"../../store/authSlice\";\nimport appConfig from \"../../config\";\nimport ZIMKitManager from \"../../ZIMKit/src/components/ZIMKitCommon/VM/ZIMKitManager\";\nimport { getCacheUserInfo } from '../../util/index';\nimport { generateToken } from '../../util/token';\nclass App extends React.Component<any, any> {\n    cacheUserInfo = getCacheUserInfo()\n    componentDidMount() {\n        // Init IMKitSDK\n        const zimKit = new ZIMKitManager();\n        zimKit.createZIM(appConfig).then(() => {\n            this.props.initIMKitSDK(true);\n            if (this.cacheUserInfo) {\n                // Auto login\n                const token = generateToken(this.cacheUserInfo.userID, 0, appConfig);\n                ZIMKitManager.getInstance().loginWithUserInfo(this.cacheUserInfo,token).then(() => {\n                    this.props.login();\n                });\n            }\n        });\n    }\n    render() {\n        return (\n            <Routes>\n                <Route path=\"/\" element={ <MainPage /> } />\n                <Route path=\"/main\" element={ <MainPage /> } />\n                <Route path=\"/login\" element={ <LoginPage /> } />\n            </Routes>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch: (arg0: { payload: any; type: string; }) => any) => {\n    return {\n        initIMKitSDK: (content: any) => dispatch(initIMKitSDK(content)),\n        login: (content: any) => dispatch(login(content))\n    };\n};\n\nexport default connect(selectIsLoggedIn, mapDispatchToProps)(App);\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport  { store }  from \"./store\";\nimport './index.css';\nimport App from './pages/App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export var ZIMPlatform;\n(function (ZIMPlatform) {\n    ZIMPlatform[ZIMPlatform[\"Web\"] = 0] = \"Web\";\n})(ZIMPlatform || (ZIMPlatform = {}));\nexport { ZIM, ZIMMessageType, ZIMMessageDirection, ZIMMessageSentStatus, ZIMConversationNotificationStatus, ZIMConversationType, ZIMConnectionState } from 'zego-zim-web';\n"],"sourceRoot":""}